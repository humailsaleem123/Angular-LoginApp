import { CommonModule } from '@angular/common';
import { Component, Output, EventEmitter, HostListener, NgModule, Directive } from '@angular/core';
import * as i0 from "@angular/core";
/**
 * Templates the default toggle icon in the picker.
 *
 * @remarks Can be applied to IgxDatePickerComponent, IgxTimePickerComponent, IgxDateRangePickerComponent
 *
 * @example
 * ```html
 * <igx-date-range-picker>
 *   <igx-picker-toggle igxSuffix>
 *      <igx-icon>calendar_view_day</igx-icon>
 *   </igx-picker-toggle>
 * </igx-date-range-picker>
 * ```
 */
export class IgxPickerToggleComponent {
    constructor() {
        this.clicked = new EventEmitter();
    }
    onClick(event) {
        // do not focus input on click
        event.stopPropagation();
        this.clicked.emit();
    }
}
IgxPickerToggleComponent.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "14.0.0", ngImport: i0, type: IgxPickerToggleComponent, deps: [], target: i0.ɵɵFactoryTarget.Component });
IgxPickerToggleComponent.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "14.0.0", version: "14.0.0", type: IgxPickerToggleComponent, selector: "igx-picker-toggle", outputs: { clicked: "clicked" }, host: { listeners: { "click": "onClick($event)" } }, ngImport: i0, template: `<ng-content></ng-content>`, isInline: true });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "14.0.0", ngImport: i0, type: IgxPickerToggleComponent, decorators: [{
            type: Component,
            args: [{
                    template: `<ng-content></ng-content>`,
                    selector: 'igx-picker-toggle'
                }]
        }], propDecorators: { clicked: [{
                type: Output
            }], onClick: [{
                type: HostListener,
                args: ['click', ['$event']]
            }] } });
/**
 * Templates the default clear icon in the picker.
 *
 * @remarks Can be applied to IgxDatePickerComponent, IgxTimePickerComponent, IgxDateRangePickerComponent
 *
 * @example
 * ```html
 * <igx-date-picker>
 *   <igx-picker-clear igxSuffix>
 *      <igx-icon>delete</igx-icon>
 *   </igx-picker-clear>
 * </igx-date-picker>
 * ```
 */
export class IgxPickerClearComponent extends IgxPickerToggleComponent {
}
IgxPickerClearComponent.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "14.0.0", ngImport: i0, type: IgxPickerClearComponent, deps: null, target: i0.ɵɵFactoryTarget.Component });
IgxPickerClearComponent.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "14.0.0", version: "14.0.0", type: IgxPickerClearComponent, selector: "igx-picker-clear", usesInheritance: true, ngImport: i0, template: `<ng-content></ng-content>`, isInline: true });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "14.0.0", ngImport: i0, type: IgxPickerClearComponent, decorators: [{
            type: Component,
            args: [{
                    template: `<ng-content></ng-content>`,
                    selector: 'igx-picker-clear'
                }]
        }] });
/**
 * IgxPickerActionsDirective can be used to re-template the dropdown/dialog action buttons.
 *
 * @remarks Can be applied to IgxDatePickerComponent, IgxTimePickerComponent, IgxDateRangePickerComponent
 *
 */
export class IgxPickerActionsDirective {
    constructor(template) {
        this.template = template;
    }
}
IgxPickerActionsDirective.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "14.0.0", ngImport: i0, type: IgxPickerActionsDirective, deps: [{ token: i0.TemplateRef }], target: i0.ɵɵFactoryTarget.Directive });
IgxPickerActionsDirective.ɵdir = i0.ɵɵngDeclareDirective({ minVersion: "14.0.0", version: "14.0.0", type: IgxPickerActionsDirective, selector: "[igxPickerActions]", ngImport: i0 });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "14.0.0", ngImport: i0, type: IgxPickerActionsDirective, decorators: [{
            type: Directive,
            args: [{
                    selector: '[igxPickerActions]'
                }]
        }], ctorParameters: function () { return [{ type: i0.TemplateRef }]; } });
/** @hidden */
export class IgxPickersCommonModule {
}
IgxPickersCommonModule.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "14.0.0", ngImport: i0, type: IgxPickersCommonModule, deps: [], target: i0.ɵɵFactoryTarget.NgModule });
IgxPickersCommonModule.ɵmod = i0.ɵɵngDeclareNgModule({ minVersion: "14.0.0", version: "14.0.0", ngImport: i0, type: IgxPickersCommonModule, declarations: [IgxPickerToggleComponent, IgxPickerClearComponent, IgxPickerActionsDirective], imports: [CommonModule], exports: [IgxPickerToggleComponent, IgxPickerClearComponent, IgxPickerActionsDirective] });
IgxPickersCommonModule.ɵinj = i0.ɵɵngDeclareInjector({ minVersion: "12.0.0", version: "14.0.0", ngImport: i0, type: IgxPickersCommonModule, imports: [CommonModule] });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "14.0.0", ngImport: i0, type: IgxPickersCommonModule, decorators: [{
            type: NgModule,
            args: [{
                    declarations: [
                        IgxPickerToggleComponent,
                        IgxPickerClearComponent,
                        IgxPickerActionsDirective
                    ],
                    imports: [CommonModule],
                    exports: [
                        IgxPickerToggleComponent,
                        IgxPickerClearComponent,
                        IgxPickerActionsDirective
                    ]
                }]
        }] });
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoicGlja2VyLWljb25zLmNvbW1vbi5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uLy4uLy4uLy4uL3Byb2plY3RzL2lnbml0ZXVpLWFuZ3VsYXIvc3JjL2xpYi9kYXRlLWNvbW1vbi9waWNrZXItaWNvbnMuY29tbW9uLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBLE9BQU8sRUFBRSxZQUFZLEVBQUUsTUFBTSxpQkFBaUIsQ0FBQztBQUMvQyxPQUFPLEVBQUUsU0FBUyxFQUFFLE1BQU0sRUFBRSxZQUFZLEVBQUUsWUFBWSxFQUFFLFFBQVEsRUFBRSxTQUFTLEVBQWUsTUFBTSxlQUFlLENBQUM7O0FBRWhIOzs7Ozs7Ozs7Ozs7O0dBYUc7QUFLSCxNQUFNLE9BQU8sd0JBQXdCO0lBSnJDO1FBTVcsWUFBTyxHQUFHLElBQUksWUFBWSxFQUFFLENBQUM7S0FRdkM7SUFMVSxPQUFPLENBQUMsS0FBaUI7UUFDNUIsOEJBQThCO1FBQzlCLEtBQUssQ0FBQyxlQUFlLEVBQUUsQ0FBQztRQUN4QixJQUFJLENBQUMsT0FBTyxDQUFDLElBQUksRUFBRSxDQUFDO0lBQ3hCLENBQUM7O3FIQVRRLHdCQUF3Qjt5R0FBeEIsd0JBQXdCLCtJQUh2QiwyQkFBMkI7MkZBRzVCLHdCQUF3QjtrQkFKcEMsU0FBUzttQkFBQztvQkFDUCxRQUFRLEVBQUUsMkJBQTJCO29CQUNyQyxRQUFRLEVBQUUsbUJBQW1CO2lCQUNoQzs4QkFHVSxPQUFPO3NCQURiLE1BQU07Z0JBSUEsT0FBTztzQkFEYixZQUFZO3VCQUFDLE9BQU8sRUFBRSxDQUFDLFFBQVEsQ0FBQzs7QUFRckM7Ozs7Ozs7Ozs7Ozs7R0FhRztBQUtILE1BQU0sT0FBTyx1QkFBd0IsU0FBUSx3QkFBd0I7O29IQUF4RCx1QkFBdUI7d0dBQXZCLHVCQUF1QiwrRUFIdEIsMkJBQTJCOzJGQUc1Qix1QkFBdUI7a0JBSm5DLFNBQVM7bUJBQUM7b0JBQ1AsUUFBUSxFQUFFLDJCQUEyQjtvQkFDckMsUUFBUSxFQUFFLGtCQUFrQjtpQkFDL0I7O0FBR0Q7Ozs7O0dBS0c7QUFJSCxNQUFNLE9BQU8seUJBQXlCO0lBQ2xDLFlBQW1CLFFBQTBCO1FBQTFCLGFBQVEsR0FBUixRQUFRLENBQWtCO0lBQUksQ0FBQzs7c0hBRHpDLHlCQUF5QjswR0FBekIseUJBQXlCOzJGQUF6Qix5QkFBeUI7a0JBSHJDLFNBQVM7bUJBQUM7b0JBQ1AsUUFBUSxFQUFFLG9CQUFvQjtpQkFDakM7O0FBTUQsY0FBYztBQWNkLE1BQU0sT0FBTyxzQkFBc0I7O21IQUF0QixzQkFBc0I7b0hBQXRCLHNCQUFzQixpQkE1RHRCLHdCQUF3QixFQThCeEIsdUJBQXVCLEVBV3ZCLHlCQUF5QixhQVl4QixZQUFZLGFBckRiLHdCQUF3QixFQThCeEIsdUJBQXVCLEVBV3ZCLHlCQUF5QjtvSEFtQnpCLHNCQUFzQixZQVByQixZQUFZOzJGQU9iLHNCQUFzQjtrQkFibEMsUUFBUTttQkFBQztvQkFDTixZQUFZLEVBQUU7d0JBQ1Ysd0JBQXdCO3dCQUN4Qix1QkFBdUI7d0JBQ3ZCLHlCQUF5QjtxQkFDNUI7b0JBQ0QsT0FBTyxFQUFFLENBQUMsWUFBWSxDQUFDO29CQUN2QixPQUFPLEVBQUU7d0JBQ0wsd0JBQXdCO3dCQUN4Qix1QkFBdUI7d0JBQ3ZCLHlCQUF5QjtxQkFDNUI7aUJBQ0oiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBDb21tb25Nb2R1bGUgfSBmcm9tICdAYW5ndWxhci9jb21tb24nO1xuaW1wb3J0IHsgQ29tcG9uZW50LCBPdXRwdXQsIEV2ZW50RW1pdHRlciwgSG9zdExpc3RlbmVyLCBOZ01vZHVsZSwgRGlyZWN0aXZlLCBUZW1wbGF0ZVJlZiB9IGZyb20gJ0Bhbmd1bGFyL2NvcmUnO1xuXG4vKipcbiAqIFRlbXBsYXRlcyB0aGUgZGVmYXVsdCB0b2dnbGUgaWNvbiBpbiB0aGUgcGlja2VyLlxuICpcbiAqIEByZW1hcmtzIENhbiBiZSBhcHBsaWVkIHRvIElneERhdGVQaWNrZXJDb21wb25lbnQsIElneFRpbWVQaWNrZXJDb21wb25lbnQsIElneERhdGVSYW5nZVBpY2tlckNvbXBvbmVudFxuICpcbiAqIEBleGFtcGxlXG4gKiBgYGBodG1sXG4gKiA8aWd4LWRhdGUtcmFuZ2UtcGlja2VyPlxuICogICA8aWd4LXBpY2tlci10b2dnbGUgaWd4U3VmZml4PlxuICogICAgICA8aWd4LWljb24+Y2FsZW5kYXJfdmlld19kYXk8L2lneC1pY29uPlxuICogICA8L2lneC1waWNrZXItdG9nZ2xlPlxuICogPC9pZ3gtZGF0ZS1yYW5nZS1waWNrZXI+XG4gKiBgYGBcbiAqL1xuQENvbXBvbmVudCh7XG4gICAgdGVtcGxhdGU6IGA8bmctY29udGVudD48L25nLWNvbnRlbnQ+YCxcbiAgICBzZWxlY3RvcjogJ2lneC1waWNrZXItdG9nZ2xlJ1xufSlcbmV4cG9ydCBjbGFzcyBJZ3hQaWNrZXJUb2dnbGVDb21wb25lbnQge1xuICAgIEBPdXRwdXQoKVxuICAgIHB1YmxpYyBjbGlja2VkID0gbmV3IEV2ZW50RW1pdHRlcigpO1xuXG4gICAgQEhvc3RMaXN0ZW5lcignY2xpY2snLCBbJyRldmVudCddKVxuICAgIHB1YmxpYyBvbkNsaWNrKGV2ZW50OiBNb3VzZUV2ZW50KSB7XG4gICAgICAgIC8vIGRvIG5vdCBmb2N1cyBpbnB1dCBvbiBjbGlja1xuICAgICAgICBldmVudC5zdG9wUHJvcGFnYXRpb24oKTtcbiAgICAgICAgdGhpcy5jbGlja2VkLmVtaXQoKTtcbiAgICB9XG59XG5cbi8qKlxuICogVGVtcGxhdGVzIHRoZSBkZWZhdWx0IGNsZWFyIGljb24gaW4gdGhlIHBpY2tlci5cbiAqXG4gKiBAcmVtYXJrcyBDYW4gYmUgYXBwbGllZCB0byBJZ3hEYXRlUGlja2VyQ29tcG9uZW50LCBJZ3hUaW1lUGlja2VyQ29tcG9uZW50LCBJZ3hEYXRlUmFuZ2VQaWNrZXJDb21wb25lbnRcbiAqXG4gKiBAZXhhbXBsZVxuICogYGBgaHRtbFxuICogPGlneC1kYXRlLXBpY2tlcj5cbiAqICAgPGlneC1waWNrZXItY2xlYXIgaWd4U3VmZml4PlxuICogICAgICA8aWd4LWljb24+ZGVsZXRlPC9pZ3gtaWNvbj5cbiAqICAgPC9pZ3gtcGlja2VyLWNsZWFyPlxuICogPC9pZ3gtZGF0ZS1waWNrZXI+XG4gKiBgYGBcbiAqL1xuQENvbXBvbmVudCh7XG4gICAgdGVtcGxhdGU6IGA8bmctY29udGVudD48L25nLWNvbnRlbnQ+YCxcbiAgICBzZWxlY3RvcjogJ2lneC1waWNrZXItY2xlYXInXG59KVxuZXhwb3J0IGNsYXNzIElneFBpY2tlckNsZWFyQ29tcG9uZW50IGV4dGVuZHMgSWd4UGlja2VyVG9nZ2xlQ29tcG9uZW50IHsgfVxuXG4vKipcbiAqIElneFBpY2tlckFjdGlvbnNEaXJlY3RpdmUgY2FuIGJlIHVzZWQgdG8gcmUtdGVtcGxhdGUgdGhlIGRyb3Bkb3duL2RpYWxvZyBhY3Rpb24gYnV0dG9ucy5cbiAqXG4gKiBAcmVtYXJrcyBDYW4gYmUgYXBwbGllZCB0byBJZ3hEYXRlUGlja2VyQ29tcG9uZW50LCBJZ3hUaW1lUGlja2VyQ29tcG9uZW50LCBJZ3hEYXRlUmFuZ2VQaWNrZXJDb21wb25lbnRcbiAqXG4gKi9cbkBEaXJlY3RpdmUoe1xuICAgIHNlbGVjdG9yOiAnW2lneFBpY2tlckFjdGlvbnNdJ1xufSlcbmV4cG9ydCBjbGFzcyBJZ3hQaWNrZXJBY3Rpb25zRGlyZWN0aXZlIHtcbiAgICBjb25zdHJ1Y3RvcihwdWJsaWMgdGVtcGxhdGU6IFRlbXBsYXRlUmVmPGFueT4pIHsgfVxufVxuXG5cbi8qKiBAaGlkZGVuICovXG5ATmdNb2R1bGUoe1xuICAgIGRlY2xhcmF0aW9uczogW1xuICAgICAgICBJZ3hQaWNrZXJUb2dnbGVDb21wb25lbnQsXG4gICAgICAgIElneFBpY2tlckNsZWFyQ29tcG9uZW50LFxuICAgICAgICBJZ3hQaWNrZXJBY3Rpb25zRGlyZWN0aXZlXG4gICAgXSxcbiAgICBpbXBvcnRzOiBbQ29tbW9uTW9kdWxlXSxcbiAgICBleHBvcnRzOiBbXG4gICAgICAgIElneFBpY2tlclRvZ2dsZUNvbXBvbmVudCxcbiAgICAgICAgSWd4UGlja2VyQ2xlYXJDb21wb25lbnQsXG4gICAgICAgIElneFBpY2tlckFjdGlvbnNEaXJlY3RpdmVcbiAgICBdXG59KVxuZXhwb3J0IGNsYXNzIElneFBpY2tlcnNDb21tb25Nb2R1bGUgeyB9XG4iXX0=