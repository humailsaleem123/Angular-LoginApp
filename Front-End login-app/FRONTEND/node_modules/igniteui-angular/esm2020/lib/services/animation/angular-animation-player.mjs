import { EventEmitter } from '@angular/core';
export class IgxAngularAnimationPlayer {
    constructor(internalPlayer) {
        this.internalPlayer = internalPlayer;
        this.animationStart = new EventEmitter();
        this.animationEnd = new EventEmitter();
        this.internalPlayer.onDone(() => this.onDone());
        const innerRenderer = this.internalPlayer._renderer;
        //  We need inner player as Angular.AnimationPlayer.getPosition returns always 0.
        // To workaround this we are getting the positions from the inner player.
        //  This is logged in Angular here - https://github.com/angular/angular/issues/18891
        //  As soon as this is resolved we can remove this hack
        this._innerPlayer = innerRenderer.engine.players[innerRenderer.engine.players.length - 1];
    }
    get position() {
        return this._innerPlayer.getPosition();
    }
    set position(value) {
        this.internalPlayer.setPosition(value);
    }
    init() {
        this.internalPlayer.init();
    }
    play() {
        this.animationStart.emit({ owner: this });
        this.internalPlayer.play();
    }
    finish() {
        this.internalPlayer.finish();
        // TODO: when animation finish angular deletes all onDone handlers. Add handlers again if needed
    }
    reset() {
        this.internalPlayer.reset();
        // calling reset does not change hasStarted to false. This is why we are doing it here via internal field
        this.internalPlayer._started = false;
    }
    destroy() {
        this.internalPlayer.destroy();
    }
    hasStarted() {
        return this.internalPlayer.hasStarted();
    }
    onDone() {
        this.animationEnd.emit({ owner: this });
    }
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiYW5ndWxhci1hbmltYXRpb24tcGxheWVyLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vLi4vLi4vLi4vLi4vcHJvamVjdHMvaWduaXRldWktYW5ndWxhci9zcmMvbGliL3NlcnZpY2VzL2FuaW1hdGlvbi9hbmd1bGFyLWFuaW1hdGlvbi1wbGF5ZXIudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQ0EsT0FBTyxFQUFFLFlBQVksRUFBRSxNQUFNLGVBQWUsQ0FBQztBQUk3QyxNQUFNLE9BQU8seUJBQXlCO0lBYWxDLFlBQW9CLGNBQXNDO1FBQXRDLG1CQUFjLEdBQWQsY0FBYyxDQUF3QjtRQVhuRCxtQkFBYyxHQUFpQyxJQUFJLFlBQVksRUFBa0IsQ0FBQztRQUNsRixpQkFBWSxHQUFpQyxJQUFJLFlBQVksRUFBa0IsQ0FBQztRQVduRixJQUFJLENBQUMsY0FBYyxDQUFDLE1BQU0sQ0FBQyxHQUFHLEVBQUUsQ0FBQyxJQUFJLENBQUMsTUFBTSxFQUFFLENBQUMsQ0FBQztRQUNoRCxNQUFNLGFBQWEsR0FBSSxJQUFJLENBQUMsY0FBc0IsQ0FBQyxTQUFTLENBQUM7UUFDN0QsaUZBQWlGO1FBQ2pGLHlFQUF5RTtRQUN6RSxvRkFBb0Y7UUFDcEYsdURBQXVEO1FBQ3ZELElBQUksQ0FBQyxZQUFZLEdBQUcsYUFBYSxDQUFDLE1BQU0sQ0FBQyxPQUFPLENBQUMsYUFBYSxDQUFDLE1BQU0sQ0FBQyxPQUFPLENBQUMsTUFBTSxHQUFHLENBQUMsQ0FBQyxDQUFDO0lBQzlGLENBQUM7SUFoQkQsSUFBVyxRQUFRO1FBQ2YsT0FBTyxJQUFJLENBQUMsWUFBWSxDQUFDLFdBQVcsRUFBRSxDQUFDO0lBQzNDLENBQUM7SUFFRCxJQUFXLFFBQVEsQ0FBQyxLQUFhO1FBQzdCLElBQUksQ0FBQyxjQUFjLENBQUMsV0FBVyxDQUFDLEtBQUssQ0FBQyxDQUFDO0lBQzNDLENBQUM7SUFZTSxJQUFJO1FBQ1AsSUFBSSxDQUFDLGNBQWMsQ0FBQyxJQUFJLEVBQUUsQ0FBQztJQUMvQixDQUFDO0lBRU0sSUFBSTtRQUNQLElBQUksQ0FBQyxjQUFjLENBQUMsSUFBSSxDQUFDLEVBQUUsS0FBSyxFQUFFLElBQUksRUFBRSxDQUFDLENBQUM7UUFDMUMsSUFBSSxDQUFDLGNBQWMsQ0FBQyxJQUFJLEVBQUUsQ0FBQztJQUMvQixDQUFDO0lBRU0sTUFBTTtRQUNULElBQUksQ0FBQyxjQUFjLENBQUMsTUFBTSxFQUFFLENBQUM7UUFDN0IsZ0dBQWdHO0lBQ3BHLENBQUM7SUFFTSxLQUFLO1FBQ1IsSUFBSSxDQUFDLGNBQWMsQ0FBQyxLQUFLLEVBQUUsQ0FBQztRQUM1Qix5R0FBeUc7UUFDeEcsSUFBSSxDQUFDLGNBQXNCLENBQUMsUUFBUSxHQUFHLEtBQUssQ0FBQztJQUNsRCxDQUFDO0lBRU0sT0FBTztRQUNWLElBQUksQ0FBQyxjQUFjLENBQUMsT0FBTyxFQUFFLENBQUM7SUFDbEMsQ0FBQztJQUVNLFVBQVU7UUFDYixPQUFPLElBQUksQ0FBQyxjQUFjLENBQUMsVUFBVSxFQUFFLENBQUM7SUFDNUMsQ0FBQztJQUVPLE1BQU07UUFDVixJQUFJLENBQUMsWUFBWSxDQUFDLElBQUksQ0FBQyxFQUFFLEtBQUssRUFBRSxJQUFJLEVBQUUsQ0FBQyxDQUFDO0lBQzVDLENBQUM7Q0FDSiIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IEFuaW1hdGlvblBsYXllciBhcyBBbmd1bGFyQW5pbWF0aW9uUGxheWVyIH0gZnJvbSAnQGFuZ3VsYXIvYW5pbWF0aW9ucyc7XG5pbXBvcnQgeyBFdmVudEVtaXR0ZXIgfSBmcm9tICdAYW5ndWxhci9jb3JlJztcbmltcG9ydCB7IElCYXNlRXZlbnRBcmdzIH0gZnJvbSAnLi4vLi4vY29yZS91dGlscyc7XG5pbXBvcnQgeyBBbmltYXRpb25QbGF5ZXIgfSBmcm9tICcuL2FuaW1hdGlvbic7XG5cbmV4cG9ydCBjbGFzcyBJZ3hBbmd1bGFyQW5pbWF0aW9uUGxheWVyIGltcGxlbWVudHMgQW5pbWF0aW9uUGxheWVyIHtcbiAgICBwcml2YXRlIF9pbm5lclBsYXllcjogQW5ndWxhckFuaW1hdGlvblBsYXllcjtcbiAgICBwdWJsaWMgYW5pbWF0aW9uU3RhcnQ6IEV2ZW50RW1pdHRlcjxJQmFzZUV2ZW50QXJncz4gPSBuZXcgRXZlbnRFbWl0dGVyPElCYXNlRXZlbnRBcmdzPigpO1xuICAgIHB1YmxpYyBhbmltYXRpb25FbmQ6IEV2ZW50RW1pdHRlcjxJQmFzZUV2ZW50QXJncz4gPSBuZXcgRXZlbnRFbWl0dGVyPElCYXNlRXZlbnRBcmdzPigpO1xuXG4gICAgcHVibGljIGdldCBwb3NpdGlvbigpOiBudW1iZXIge1xuICAgICAgICByZXR1cm4gdGhpcy5faW5uZXJQbGF5ZXIuZ2V0UG9zaXRpb24oKTtcbiAgICB9XG5cbiAgICBwdWJsaWMgc2V0IHBvc2l0aW9uKHZhbHVlOiBudW1iZXIpIHtcbiAgICAgICAgdGhpcy5pbnRlcm5hbFBsYXllci5zZXRQb3NpdGlvbih2YWx1ZSk7XG4gICAgfVxuXG4gICAgY29uc3RydWN0b3IocHJpdmF0ZSBpbnRlcm5hbFBsYXllcjogQW5ndWxhckFuaW1hdGlvblBsYXllcikge1xuICAgICAgICB0aGlzLmludGVybmFsUGxheWVyLm9uRG9uZSgoKSA9PiB0aGlzLm9uRG9uZSgpKTtcbiAgICAgICAgY29uc3QgaW5uZXJSZW5kZXJlciA9ICh0aGlzLmludGVybmFsUGxheWVyIGFzIGFueSkuX3JlbmRlcmVyO1xuICAgICAgICAvLyAgV2UgbmVlZCBpbm5lciBwbGF5ZXIgYXMgQW5ndWxhci5BbmltYXRpb25QbGF5ZXIuZ2V0UG9zaXRpb24gcmV0dXJucyBhbHdheXMgMC5cbiAgICAgICAgLy8gVG8gd29ya2Fyb3VuZCB0aGlzIHdlIGFyZSBnZXR0aW5nIHRoZSBwb3NpdGlvbnMgZnJvbSB0aGUgaW5uZXIgcGxheWVyLlxuICAgICAgICAvLyAgVGhpcyBpcyBsb2dnZWQgaW4gQW5ndWxhciBoZXJlIC0gaHR0cHM6Ly9naXRodWIuY29tL2FuZ3VsYXIvYW5ndWxhci9pc3N1ZXMvMTg4OTFcbiAgICAgICAgLy8gIEFzIHNvb24gYXMgdGhpcyBpcyByZXNvbHZlZCB3ZSBjYW4gcmVtb3ZlIHRoaXMgaGFja1xuICAgICAgICB0aGlzLl9pbm5lclBsYXllciA9IGlubmVyUmVuZGVyZXIuZW5naW5lLnBsYXllcnNbaW5uZXJSZW5kZXJlci5lbmdpbmUucGxheWVycy5sZW5ndGggLSAxXTtcbiAgICB9XG5cbiAgICBwdWJsaWMgaW5pdCgpOiB2b2lkIHtcbiAgICAgICAgdGhpcy5pbnRlcm5hbFBsYXllci5pbml0KCk7XG4gICAgfVxuXG4gICAgcHVibGljIHBsYXkoKTogdm9pZCB7XG4gICAgICAgIHRoaXMuYW5pbWF0aW9uU3RhcnQuZW1pdCh7IG93bmVyOiB0aGlzIH0pO1xuICAgICAgICB0aGlzLmludGVybmFsUGxheWVyLnBsYXkoKTtcbiAgICB9XG5cbiAgICBwdWJsaWMgZmluaXNoKCk6IHZvaWQge1xuICAgICAgICB0aGlzLmludGVybmFsUGxheWVyLmZpbmlzaCgpO1xuICAgICAgICAvLyBUT0RPOiB3aGVuIGFuaW1hdGlvbiBmaW5pc2ggYW5ndWxhciBkZWxldGVzIGFsbCBvbkRvbmUgaGFuZGxlcnMuIEFkZCBoYW5kbGVycyBhZ2FpbiBpZiBuZWVkZWRcbiAgICB9XG5cbiAgICBwdWJsaWMgcmVzZXQoKTogdm9pZCB7XG4gICAgICAgIHRoaXMuaW50ZXJuYWxQbGF5ZXIucmVzZXQoKTtcbiAgICAgICAgLy8gY2FsbGluZyByZXNldCBkb2VzIG5vdCBjaGFuZ2UgaGFzU3RhcnRlZCB0byBmYWxzZS4gVGhpcyBpcyB3aHkgd2UgYXJlIGRvaW5nIGl0IGhlcmUgdmlhIGludGVybmFsIGZpZWxkXG4gICAgICAgICh0aGlzLmludGVybmFsUGxheWVyIGFzIGFueSkuX3N0YXJ0ZWQgPSBmYWxzZTtcbiAgICB9XG5cbiAgICBwdWJsaWMgZGVzdHJveSgpOiB2b2lkIHtcbiAgICAgICAgdGhpcy5pbnRlcm5hbFBsYXllci5kZXN0cm95KCk7XG4gICAgfVxuXG4gICAgcHVibGljIGhhc1N0YXJ0ZWQoKTogYm9vbGVhbiB7XG4gICAgICAgIHJldHVybiB0aGlzLmludGVybmFsUGxheWVyLmhhc1N0YXJ0ZWQoKTtcbiAgICB9XG5cbiAgICBwcml2YXRlIG9uRG9uZSgpOiB2b2lkIHtcbiAgICAgICAgdGhpcy5hbmltYXRpb25FbmQuZW1pdCh7IG93bmVyOiB0aGlzIH0pO1xuICAgIH1cbn1cbiJdfQ==