import { InjectionToken } from '@angular/core';
export const IGX_GRID_BASE = new InjectionToken('IgxGridBaseToken');
export const IGX_GRID_SERVICE_BASE = new InjectionToken('IgxGridServiceBaseToken');
//# sourceMappingURL=data:application/json;base64,{"version":3,"file":"grid.interface.js","sourceRoot":"","sources":["../../../../../../projects/igniteui-angular/src/lib/grids/common/grid.interface.ts"],"names":[],"mappings":"AAWA,OAAO,EAA+C,cAAc,EAA4C,MAAM,eAAe,CAAC;AA4BtI,MAAM,CAAC,MAAM,aAAa,GAAG,IAAI,cAAc,CAAW,kBAAkB,CAAC,CAAC;AAC9E,MAAM,CAAC,MAAM,qBAAqB,GAAG,IAAI,cAAc,CAAkB,yBAAyB,CAAC,CAAC","sourcesContent":["import { FilterMode, GridPagingMode, GridSelectionMode, GridSummaryCalculationMode, GridSummaryPosition } from './enums';\nimport {\n    ISearchInfo, IGridCellEventArgs, IRowSelectionEventArgs, IColumnSelectionEventArgs, IGridEditEventArgs,\n    IPinColumnCancellableEventArgs, IColumnVisibilityChangedEventArgs, IColumnVisibilityChangingEventArgs,\n    IRowDragEndEventArgs, IColumnMovingStartEventArgs, IColumnMovingEndEventArgs,\n    IGridEditDoneEventArgs, IRowDataEventArgs, IGridKeydownEventArgs, IRowDragStartEventArgs,\n    IColumnMovingEventArgs, IPinColumnEventArgs,\n    IActiveNodeChangeEventArgs,\n    ICellPosition, IFilteringEventArgs, IColumnResizeEventArgs, IRowToggleEventArgs, IGridToolbarExportEventArgs\n} from '../common/events';\nimport { DisplayDensity, IDensityChangedEventArgs } from '../../core/displayDensity';\nimport { ChangeDetectorRef, ElementRef, EventEmitter, InjectionToken, QueryList, TemplateRef, ViewContainerRef } from '@angular/core';\nimport { FilteringExpressionsTree, IFilteringExpressionsTree } from '../../data-operations/filtering-expressions-tree';\nimport { IGridResourceStrings } from '../../core/i18n/grid-resources';\nimport { IGroupingExpression } from '../../data-operations/grouping-expression.interface';\nimport { IGroupByRecord } from '../../data-operations/groupby-record.interface';\nimport { IGroupByExpandState } from '../../data-operations/groupby-expand-state.interface';\nimport { IgxPaginatorComponent } from '../../paginator/paginator.component';\nimport { IgxCell, IgxEditRow } from './crud.service';\nimport { GridSelectionRange } from './types';\nimport { FilteringLogic } from '../../data-operations/filtering-expression.interface';\nimport { IFilteringStrategy } from '../../data-operations/filtering-strategy';\nimport { DropPosition, IgxColumnMovingService } from '../moving/moving.service';\nimport { IgxOverlayOutletDirective, IgxToggleDirective } from '../../directives/toggle/toggle.directive';\nimport { Observable, Subject } from 'rxjs';\nimport { ITreeGridRecord } from '../tree-grid/tree-grid.interfaces';\nimport { State, Transaction, TransactionService } from '../../services/transaction/transaction';\nimport { GridColumnDataType } from '../../data-operations/data-util';\nimport { IgxFilteringOperand } from '../../data-operations/filtering-condition';\nimport { IColumnPipeArgs, ISortingOptions, MRLResizeColumnInfo } from '../columns/interfaces';\nimport { IgxSummaryResult } from '../summaries/grid-summary';\nimport { ISortingExpression, ISortingStrategy, SortingDirection } from '../../data-operations/sorting-strategy';\nimport { IGridGroupingStrategy, IGridSortingStrategy } from './strategy';\nimport { IForOfState, IgxGridForOfDirective } from '../../directives/for-of/for_of.directive';\nimport { OverlaySettings } from '../../services/overlay/utilities';\nimport { IPinningConfig } from '../grid.common';\nimport { IDimensionsChange, IPivotConfiguration, IPivotDimension, IPivotKeys, IPivotValue, IValuesChange, PivotDimensionType } from '../pivot-grid/pivot-grid.interface';\nimport { IDataCloneStrategy } from '../../data-operations/data-clone-strategy';\n\nexport const IGX_GRID_BASE = new InjectionToken<GridType>('IgxGridBaseToken');\nexport const IGX_GRID_SERVICE_BASE = new InjectionToken<GridServiceType>('IgxGridServiceBaseToken');\n\nexport interface IPathSegment {\n    rowID: any;\n    rowIslandKey: string;\n}\n\nexport interface IGridDataBindable {\n    data: any[] | null;\n    filteredData: any[];\n}\n\nexport interface CellType {\n    value: any;\n    editValue: any;\n    selected: boolean;\n    active: boolean;\n    editable: boolean;\n    editMode: boolean;\n    nativeElement?: HTMLElement;\n    column: ColumnType;\n    row: RowType;\n    grid: GridType;\n    id?: { rowID: any; columnID: number; rowIndex: number };\n    cellID?: any;\n    readonly?: boolean;\n    title?: any;\n    width: string;\n    visibleColumnIndex?: number;\n    update: (value: any) => void;\n    setEditMode?(value: boolean): void;\n    calculateSizeToFit?(range: any): number;\n    activate?(event: FocusEvent | KeyboardEvent): void;\n    onDoubleClick?(event: MouseEvent): void;\n    onClick?(event: MouseEvent): void;\n}\n\nexport interface RowType {\n    nativeElement?: HTMLElement;\n    index: number;\n    viewIndex: number;\n    isGroupByRow?: boolean;\n    isSummaryRow?: boolean;\n    summaries?: Map<string, IgxSummaryResult[]>;\n    groupRow?: IGroupByRecord;\n    key?: any;\n    data?: any;\n    cells?: QueryList<CellType> | CellType[];\n    disabled?: boolean;\n    virtDirRow?: IgxGridForOfDirective<any>;\n    pinned?: boolean;\n    selected?: boolean;\n    expanded?: boolean;\n    deleted?: boolean;\n    inEditMode?: boolean;\n    children?: RowType[];\n    parent?: RowType;\n    hasChildren?: boolean;\n    treeRow?: ITreeGridRecord;\n    addRowUI?: boolean;\n    focused?: boolean;\n    grid: GridType;\n    onRowSelectorClick?: (event: MouseEvent) => void;\n    onClick?: (event: MouseEvent) => void;\n    beginAddRow?: () => void;\n    update?: (value: any) => void;\n    delete?: () => any;\n    pin?: () => void;\n    unpin?: () => void;\n}\n\nexport interface ColumnType {\n    grid: GridType;\n    children: QueryList<ColumnType>;\n    allChildren: ColumnType[];\n    // TYPE\n    headerGroup: any;\n    // TYPE\n    headerCell: any;\n\n    headerTemplate: TemplateRef<any>;\n    collapsibleIndicatorTemplate?: TemplateRef<any>;\n    headerClasses: any;\n    headerStyles: any;\n    headerGroupClasses: any;\n    headerGroupStyles: any;\n\n    calcWidth: any;\n    minWidthPx: number;\n    maxWidthPx: number;\n    minWidth: string;\n    maxWidth: string;\n    minWidthPercent: number;\n    maxWidthPercent: number;\n\n    field: string;\n    header?: string;\n    index: number;\n    dataType: GridColumnDataType;\n    inlineEditorTemplate: TemplateRef<any>;\n    visibleIndex: number;\n    collapsible?: boolean;\n    editable: boolean;\n    resizable: boolean;\n    searchable: boolean;\n    columnGroup: boolean;\n    /** @deprecated in version 13.1.0. Use `IgxGridComponent.moving` instead.*/\n    movable: boolean;\n    groupable: boolean;\n    sortable: boolean;\n    filterable: boolean;\n    hidden: boolean;\n    disablePinning: boolean;\n    disableHiding: boolean;\n    sortStrategy: ISortingStrategy;\n    sortingIgnoreCase: boolean;\n    filterCell: any;\n    filters: IgxFilteringOperand;\n    filteringIgnoreCase: boolean;\n    filteringExpressionsTree: FilteringExpressionsTree;\n    hasSummary: boolean;\n    summaries: any;\n    summaryTemplate: TemplateRef<any>;\n    pinned: boolean;\n    expanded: boolean;\n    selected: boolean;\n    selectable: boolean;\n    columnLayout: boolean;\n    level: number;\n    rowStart: number;\n    rowEnd: number;\n    colStart: number;\n    colEnd: number;\n    gridRowSpan: number;\n    gridColumnSpan: number;\n    columnLayoutChild: boolean;\n    width: string;\n    topLevelParent?: ColumnType;\n    parent?: ColumnType;\n    pipeArgs: IColumnPipeArgs;\n    hasNestedPath: boolean;\n    defaultTimeFormat: string;\n    defaultDateTimeFormat: string;\n    additionalTemplateContext: any;\n    isLastPinned: boolean;\n    isFirstPinned: boolean;\n    applySelectableClass: boolean;\n    title: string;\n    groupingComparer: (a: any, b: any) => number;\n\n    filterCellTemplate: TemplateRef<any>;\n\n    move(index: number): void;\n    getAutoSize(): string;\n    getResizableColUnderEnd(): MRLResizeColumnInfo[];\n    getCellWidth(): string;\n    getGridTemplate(isRow: boolean): string;\n    toggleVisibility(value?: boolean): void;\n    formatter(value: any, rowData?: any): any;\n    populateVisibleIndexes?(): void;\n}\n\nexport interface GridServiceType {\n\n    grid: GridType;\n    crudService: any;\n    cms: IgxColumnMovingService;\n\n    get_data(): any[];\n    get_all_data(includeTransactions?: boolean): any[];\n    get_column_by_name(name: string): ColumnType;\n    getRowData(id: any): any;\n    get_rec_by_id(id: any): any;\n    get_row_id(rowData: any): any;\n    get_row_by_index(rowSelector: any): RowType;\n    get_row_by_key(rowSelector: any): RowType;\n    get_rec_index_by_id(pk: string | number, dataCollection?: any[]): number;\n    get_rec_id_by_index(index: number, dataCollection?: any[]): any;\n    get_row_index_in_data(rowID: any, dataCollection?: any[]): number;\n    get_cell_by_key(rowSelector: any, field: string): CellType;\n    get_cell_by_index(rowIndex: number, columnID: number | string): CellType;\n    get_cell_by_visible_index(rowIndex: number, columnIndex: number);\n    set_grouprow_expansion_state?(groupRow: IGroupByRecord, value: boolean): void;\n    row_deleted_transaction(id: any): boolean;\n    addRowToData(rowData: any, parentID?: any): void;\n    deleteRowById(id: any): any;\n    get_row_expansion_state(id: any): boolean;\n    set_row_expansion_state(id: any, expanded: boolean, event?: Event): void;\n    get_summary_data(): any[];\n\n    prepare_sorting_expression(stateCollections: Array<Array<any>>, expression: ISortingExpression): void;\n    sort(expression: ISortingExpression): void;\n    sort_multiple(expressions: ISortingExpression[]): void;\n    clear_sort(fieldName: string): void;\n\n    filterDataByExpressions(expressionsTree: IFilteringExpressionsTree): any[];\n    sortDataByExpressions(data: any[], expressions: ISortingExpression[]): any[];\n\n    update_cell(cell: IgxCell): IGridEditEventArgs;\n    update_row(row: IgxEditRow, value: any, event?: Event): IGridEditEventArgs;\n\n    expand_path_to_record?(record: ITreeGridRecord): void;\n    get_selected_children?(record: ITreeGridRecord, selectedRowIDs: any[]): void;\n    get_groupBy_record_id?(gRow: IGroupByRecord): string;\n    remove_grouping_expression?(fieldName: string): void;\n    clear_groupby?(field: string | any): void;\n    getParentRowId?(child: GridType): any;\n    getChildGrids?(inDepth?: boolean): GridType[];\n    getChildGrid?(path: IPathSegment[]): GridType;\n\n    unsetChildRowIsland?(rowIsland: GridType): void;\n    registerChildRowIsland?(rowIsland: GridType): void;\n}\n\n\n/**\n * An interface describing a Grid type\n */\nexport interface GridType extends IGridDataBindable {\n    displayDensity: DisplayDensity;\n    locale: string;\n    resourceStrings: IGridResourceStrings;\n    nativeElement: HTMLElement;\n    rowEditable: boolean;\n    rootSummariesEnabled: boolean;\n    allowFiltering: boolean;\n    rowDraggable: boolean;\n    primaryKey: any;\n    id: string;\n    renderedRowHeight: number;\n    pipeTrigger: number;\n    summaryPipeTrigger: number;\n    filteringPipeTrigger: number;\n    hasColumnLayouts: boolean;\n    moving: boolean;\n    isLoading: boolean;\n    dataCloneStrategy: IDataCloneStrategy;\n\n    gridAPI: GridServiceType;\n\n    filterMode: FilterMode;\n\n    // TYPE\n    theadRow: any;\n    groupArea: any;\n    filterCellList: any[];\n    filteringRow: any;\n    actionStrip: any;\n    resizeLine: any;\n\n    tfoot: ElementRef<HTMLElement>;\n    paginator: IgxPaginatorComponent;\n    paginatorList?: QueryList<IgxPaginatorComponent>;\n    crudService: any;\n    summaryService: any;\n\n\n\n    virtualizationState: IForOfState;\n    // TYPE\n    selectionService: any;\n    navigation: any;\n    filteringService: any;\n    outlet: any;\n    hasMovableColumns: boolean;\n    isRowSelectable: boolean;\n    showRowSelectors: boolean;\n    isPinningToStart: boolean;\n    columnInDrag: any;\n    pinnedWidth: number;\n    unpinnedWidth: number;\n    summariesMargin: number;\n    headSelectorBaseAriaLabel: string;\n\n    hasVisibleColumns: boolean;\n    hasExpandableChildren?: boolean;\n    showExpandAll?: boolean;\n\n    hiddenColumnsCount: number;\n    pinnedColumnsCount: number;\n\n    iconTemplate?: TemplateRef<any>;\n    groupRowTemplate?: TemplateRef<any>;\n    groupByRowSelectorTemplate?: TemplateRef<any>;\n    rowLoadingIndicatorTemplate?: TemplateRef<any>;\n    headSelectorTemplate: TemplateRef<any>;\n    rowSelectorTemplate: TemplateRef<any>;\n    sortHeaderIconTemplate: TemplateRef<any>;\n    sortAscendingHeaderIconTemplate: TemplateRef<any>;\n    sortDescendingHeaderIconTemplate: TemplateRef<any>;\n    headerCollapseIndicatorTemplate: TemplateRef<any>;\n    headerExpandIndicatorTemplate: TemplateRef<any>;\n    dragIndicatorIconTemplate: any;\n    dragIndicatorIconBase: any;\n    disableTransitions: boolean;\n    currencyPositionLeft: boolean;\n\n    columnWidthSetByUser: boolean;\n    headerFeaturesWidth: number;\n    calcHeight: number;\n    calcWidth: number;\n    outerWidth: number;\n    rowHeight: number;\n    multiRowLayoutRowSize: number;\n    defaultHeaderGroupMinWidth: any;\n    maxLevelHeaderDepth: number;\n    defaultRowHeight: number;\n    _baseFontSize?: number;\n    scrollSize: number;\n\n    pinning: IPinningConfig;\n    expansionStates: Map<any, boolean>;\n    parentVirtDir: any;\n    tbody: any;\n    verticalScrollContainer: any;\n    dataRowList: any;\n    rowList: any;\n    columnList: QueryList<ColumnType>;\n    columns: ColumnType[];\n    visibleColumns: ColumnType[];\n    unpinnedColumns: ColumnType[];\n    pinnedColumns: ColumnType[];\n    headerCellList: any[];\n    headerGroups: any[];\n    headerGroupsList: any[];\n    summariesRowList: any;\n    headerContainer: any;\n    isCellSelectable: boolean;\n    isMultiRowSelectionEnabled: boolean;\n    hasPinnedRecords: boolean;\n    pinnedRecordsCount: number;\n    pinnedRecords: any[];\n    unpinnedRecords: any[];\n    pinnedDataView: any[];\n    pinnedRows: any[];\n    dataView: any[];\n    _filteredUnpinnedData: any[];\n    _filteredSortedUnpinnedData: any[];\n    filteredSortedData: any[];\n    dataWithAddedInTransactionRows: any[];\n    transactions: TransactionService<Transaction, State>;\n    defaultSummaryHeight: number;\n    summaryRowHeight: number;\n    rowEditingOverlay: IgxToggleDirective;\n    totalRowsCountAfterFilter: number;\n    _totalRecords: number;\n\n    pagingMode: GridPagingMode;\n    pagingState: any;\n\n    rowEditTabs: any;\n    lastSearchInfo: ISearchInfo;\n    page: number;\n    perPage: number;\n    dragRowID: any;\n    rowDragging: boolean;\n    evenRowCSS: string;\n    oddRowCSS: string;\n\n    firstEditableColumnIndex: number;\n    lastEditableColumnIndex: number;\n    isRowPinningToTop: boolean;\n    hasDetails: boolean;\n    hasSummarizedColumns: boolean;\n    hasColumnGroups: boolean;\n    hasEditableColumns: boolean;\n    uniqueColumnValuesStrategy: (column: ColumnType, tree: FilteringExpressionsTree, done: (values: any[]) => void) => void;\n    getHeaderCellWidth: (element: HTMLElement) => ISizeInfo;\n\n    cdr: ChangeDetectorRef;\n    document: Document;\n    rowExpandedIndicatorTemplate: TemplateRef<any>;\n    rowCollapsedIndicatorTemplate: TemplateRef<any>;\n    excelStyleHeaderIconTemplate: TemplateRef<any>;\n\n    selectRowOnClick: boolean;\n    cellSelection: GridSelectionMode;\n    rowSelection: GridSelectionMode;\n    columnSelection: GridSelectionMode;\n    summaryCalculationMode: GridSummaryCalculationMode;\n    summaryPosition: GridSummaryPosition;\n\n    // XXX: Work around till we fixed the injection tokens\n    lastChildGrid?: GridType;\n    toolbarOutlet?: ViewContainerRef;\n    paginatorOutlet?: ViewContainerRef;\n    flatData?: any[] | null;\n    childRow?: any;\n    expansionDepth?: number;\n    childDataKey?: any;\n    foreignKey?: any;\n    cascadeOnDelete?: boolean;\n    loadChildrenOnDemand?: (parentID: any, done: (children: any[]) => void) => void;\n    hasChildrenKey?: any;\n    loadingRows?: Set<any>;\n    parent?: GridType;\n    highlightedRowID?: any;\n    updateOnRender?: boolean;\n    childLayoutKeys?: any[];\n    childLayoutList?: QueryList<any>;\n    rootGrid?: GridType;\n    processedRootRecords?: ITreeGridRecord[];\n    rootRecords?: ITreeGridRecord[];\n    records?: Map<any, ITreeGridRecord>;\n    processedExpandedFlatData?: any[] | null;\n    processedRecords?: Map<any, ITreeGridRecord>;\n    treeGroupArea?: any;\n\n    activeNodeChange: EventEmitter<IActiveNodeChangeEventArgs>;\n    gridKeydown: EventEmitter<IGridKeydownEventArgs>;\n    cellClick: EventEmitter<IGridCellEventArgs>;\n    doubleClick: EventEmitter<IGridCellEventArgs>;\n    contextMenu: EventEmitter<IGridCellEventArgs>;\n    selected: EventEmitter<IGridCellEventArgs>;\n    rangeSelected: EventEmitter<GridSelectionRange>;\n    rowSelectionChanging: EventEmitter<IRowSelectionEventArgs>;\n    localeChange: EventEmitter<boolean>;\n    filtering: EventEmitter<IFilteringEventArgs>;\n    filteringDone: EventEmitter<IFilteringExpressionsTree>;\n    columnPinned: EventEmitter<IPinColumnEventArgs>;\n    columnResized: EventEmitter<IColumnResizeEventArgs>;\n    columnMovingEnd: EventEmitter<IColumnMovingEndEventArgs>;\n    columnSelectionChanging: EventEmitter<IColumnSelectionEventArgs>;\n    columnMoving: EventEmitter<IColumnMovingEventArgs>;\n    columnMovingStart: EventEmitter<IColumnMovingStartEventArgs>;\n    columnPin: EventEmitter<IPinColumnCancellableEventArgs>;\n    columnVisibilityChanging: EventEmitter<IColumnVisibilityChangingEventArgs>;\n    columnVisibilityChanged: EventEmitter<IColumnVisibilityChangedEventArgs>;\n    batchEditingChange?: EventEmitter<boolean>;\n    onDensityChanged: EventEmitter<IDensityChangedEventArgs>;\n    rowAdd: EventEmitter<IGridEditEventArgs>;\n    rowAdded: EventEmitter<IRowDataEventArgs>;\n    rowAddedNotifier: Subject<IRowDataEventArgs>;\n    rowDeleted: EventEmitter<IRowDataEventArgs>;\n    rowDeletedNotifier: Subject<IRowDataEventArgs>;\n    cellEditEnter: EventEmitter<IGridEditEventArgs>;\n    cellEdit: EventEmitter<IGridEditEventArgs>;\n    cellEditDone: EventEmitter<IGridEditDoneEventArgs>;\n    cellEditExit: EventEmitter<IGridEditDoneEventArgs>;\n    rowEditEnter: EventEmitter<IGridEditEventArgs>;\n    rowEdit: EventEmitter<IGridEditEventArgs>;\n    rowEditDone: EventEmitter<IGridEditDoneEventArgs>;\n    rowEditExit: EventEmitter<IGridEditDoneEventArgs>;\n    rowDragStart: EventEmitter<IRowDragStartEventArgs>;\n    rowDragEnd: EventEmitter<IRowDragEndEventArgs>;\n    rowToggle: EventEmitter<IRowToggleEventArgs>;\n\n    toolbarExporting: EventEmitter<IGridToolbarExportEventArgs>;\n    rendered$: Observable<boolean>;\n    resizeNotify: Subject<void>;\n\n    sortStrategy: IGridSortingStrategy;\n    groupStrategy?: IGridGroupingStrategy;\n    filteringLogic: FilteringLogic;\n    filterStrategy: IFilteringStrategy;\n    allowAdvancedFiltering: boolean;\n    sortingExpressions: ISortingExpression[];\n    sortingExpressionsChange: EventEmitter<ISortingExpression[]>;\n    filteringExpressionsTree: IFilteringExpressionsTree;\n    filteringExpressionsTreeChange: EventEmitter<IFilteringExpressionsTree>;\n    advancedFilteringExpressionsTree: IFilteringExpressionsTree;\n    advancedFilteringExpressionsTreeChange: EventEmitter<IFilteringExpressionsTree>;\n    sortingOptions: ISortingOptions;\n\n    batchEditing: boolean;\n    groupingExpansionState?: IGroupByExpandState[];\n    groupingExpressions?: IGroupingExpression[];\n    groupingExpressionsChange?: EventEmitter<IGroupingExpression[]>;\n    groupsExpanded?: boolean;\n    groupsRecords?: IGroupByRecord[];\n    groupingFlatResult?: any[];\n    groupingResult?: any[];\n    groupingMetadata?: any[];\n    selectedCells?: CellType[];\n    selectedRows: any[];\n    activeDescendant?: string;\n    isPivot?: boolean;\n\n    toggleGroup?(groupRow: IGroupByRecord): void;\n    clearGrouping?(field: string): void;\n    groupBy?(expression: IGroupingExpression | Array<IGroupingExpression>): void;\n    resolveOutlet?(): IgxOverlayOutletDirective;\n    updateColumns(columns: ColumnType[]): void;\n    getSelectedRanges(): GridSelectionRange[];\n    deselectAllColumns(): void;\n    deselectColumns(columns: string[] | ColumnType[]): void;\n    selectColumns(columns: string[] | ColumnType[]): void;\n    selectedColumns(): ColumnType[];\n    refreshSearch(): void;\n    getDefaultExpandState(record: any): boolean;\n    trackColumnChanges(index: number, column: any): any;\n    getPossibleColumnWidth(): string;\n    resetHorizontalVirtualization(): void;\n    hasVerticalScroll(): boolean;\n    getVisibleContentHeight(): number;\n    getDragGhostCustomTemplate(): TemplateRef<any> | null;\n    openRowOverlay(id: any): void;\n    openAdvancedFilteringDialog(): void;\n    showSnackbarFor(index: number): void;\n    getColumnByName(name: string): any;\n    getColumnByVisibleIndex(index: number): ColumnType;\n    getHeaderGroupWidth(column: ColumnType): string;\n    getRowByKey?(key: any): RowType;\n    getRowByIndex?(index: number): RowType;\n    setFilteredData(data: any, pinned: boolean): void;\n    setFilteredSortedData(data: any, pinned: boolean): void;\n    sort(expression: ISortingExpression | ISortingExpression[]): void;\n    clearSort(name?: string): void;\n    pinRow(id: any, index?: number, row?: RowType): boolean;\n    unpinRow(id: any, row?: RowType): boolean;\n    getUnpinnedIndexById(id: any): number;\n    getEmptyRecordObjectFor(inRow: RowType): any;\n    isSummaryRow(rec: any): boolean;\n    isRecordPinned(rec: any): boolean;\n    getInitialPinnedIndex(rec: any): number;\n    isRecordPinnedByViewIndex(rowIndex: number): boolean;\n    isColumnGrouped(fieldName: string): boolean;\n    isDetailRecord(rec: any): boolean;\n    isGroupByRecord(rec: any): boolean;\n    isGhostRecord(rec: any): boolean;\n    isTreeRow?(rec: any): boolean;\n    isChildGridRecord?(rec: any): boolean;\n    getChildGrids?(inDepth?: boolean): any[];\n    isHierarchicalRecord?(record: any): boolean;\n    columnToVisibleIndex(key: string | number): number;\n    moveColumn(column: ColumnType, target: ColumnType, pos: DropPosition): void;\n    navigateTo(rowIndex: number, visibleColumnIndex: number, callback?: (e: any) => any): void;\n    getPreviousCell(currRowIndex: number, curVisibleColIndex: number, callback: (c: ColumnType) => boolean): ICellPosition;\n    getNextCell(currRowIndex: number, curVisibleColIndex: number, callback: (c: ColumnType) => boolean): ICellPosition;\n    clearCellSelection(): void;\n    selectRange(range: GridSelectionRange | GridSelectionRange[]): void;\n    selectRows(rowIDs: any[], clearCurrentSelection?: boolean): void;\n    deselectRows(rowIDs: any[]): void;\n    selectAllRows(onlyFilterData?: boolean): void;\n    deselectAllRows(onlyFilterData?: boolean): void;\n    setUpPaginator(): void;\n    createFilterDropdown(column: ColumnType, options: OverlaySettings): any;\n    // Type to RowType\n    createRow?(index: number, data?: any): RowType;\n    deleteRow(id: any): any;\n    deleteRowById(id: any): any;\n    collapseRow(id: any): void;\n    notifyChanges(repaint?: boolean): void;\n    resetColumnCollections(): void;\n    triggerPipes(): void;\n    repositionRowEditingOverlay(row: RowType): void;\n    closeRowEditingOverlay(): void;\n    reflow(): void;\n\n    // TODO: Maybe move them to FlatGridType, but then will we need another token?\n    isExpandedGroup(group: IGroupByRecord): boolean;\n    createColumnsList?(cols: ColumnType[]): void;\n    toggleAllGroupRows?(): void;\n    toggleAll?(): void;\n    generateRowPath?(rowId: any): any[];\n    preventHeaderScroll?(args: any): void;\n\n}\n\n/**\n * An interface describing a Flat Grid type\n */\nexport interface FlatGridType extends GridType {\n    groupingExpansionState: IGroupByExpandState[];\n    groupingExpressions: IGroupingExpression[];\n    groupingExpressionsChange: EventEmitter<IGroupingExpression[]>;\n\n    toggleGroup(groupRow: IGroupByRecord): void;\n    clearGrouping(field: string): void;\n    groupBy(expression: IGroupingExpression | Array<IGroupingExpression>): void;\n}\n\n/**\n * An interface describing a Tree Grid type\n */\nexport interface TreeGridType extends GridType {\n    records: Map<any, ITreeGridRecord>;\n    isTreeRow(rec: any): boolean;\n}\n\n/**\n * An interface describing a Hierarchical Grid type\n */\nexport interface HierarchicalGridType extends GridType {\n    childLayoutKeys: any[];\n}\n\nexport interface PivotGridType extends GridType {\n    pivotConfiguration: IPivotConfiguration;\n    allDimensions: IPivotDimension[],\n    showPivotConfigurationUI: boolean;\n    columnDimensions: IPivotDimension[];\n    rowDimensions: IPivotDimension[];\n    rowDimensionResizing: boolean;\n    values: IPivotValue[];\n    filterDimensions: IPivotDimension[];\n    dimensionDataColumns: ColumnType[];\n    pivotRowWidths: number;\n    setupColumns(): void;\n    toggleRow(rowID: any): void;\n    resolveDataTypes(field: any): GridColumnDataType;\n    moveDimension(dimension: IPivotDimension, targetCollectionType: PivotDimensionType, index? : number);\n    getDimensionsByType(dimension: PivotDimensionType);\n    toggleDimension(dimension: IPivotDimension);\n    sortDimension(dimension: IPivotDimension, sortDirection: SortingDirection);\n    toggleValue(value: IPivotValue);\n    moveValue(value: IPivotValue, index?: number);\n    rowDimensionWidthToPixels(dim: IPivotDimension): number;\n    dimensionsChange: EventEmitter<IDimensionsChange>;\n    valuesChange: EventEmitter<IValuesChange>;\n    pivotKeys: IPivotKeys;\n    hasMultipleValues: boolean;\n    excelStyleFilterMaxHeight: string;\n    excelStyleFilterMinHeight: string;\n}\nexport interface GridSVGIcon {\n    name: string;\n    value: string;\n}\n\nexport interface ISizeInfo {\n    width: number,\n    padding: number\n}\n"]}