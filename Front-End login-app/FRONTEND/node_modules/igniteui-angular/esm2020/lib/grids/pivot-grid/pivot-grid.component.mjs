import { __decorate } from "tslib";
import { ChangeDetectionStrategy, Component, EventEmitter, HostBinding, Inject, Input, LOCALE_ID, Output, Optional, TemplateRef, ViewChild, ViewChildren } from '@angular/core';
import { IgxGridBaseDirective } from '../grid-base.directive';
import { IgxFilteringService } from '../filtering/grid-filtering.service';
import { IgxGridSelectionService } from '../selection/selection.service';
import { IgxForOfSyncService, IgxForOfScrollSyncService } from '../../directives/for-of/for_of.sync.service';
import { IGX_GRID_BASE } from '../common/grid.interface';
import { IgxGridCRUDService } from '../common/crud.service';
import { IgxGridSummaryService } from '../summaries/grid-summary.service';
import { DEFAULT_PIVOT_KEYS, PivotDimensionType } from './pivot-grid.interface';
import { IgxPivotHeaderRowComponent } from './pivot-header-row.component';
import { IgxColumnGroupComponent } from '../columns/column-group.component';
import { IgxColumnComponent } from '../columns/column.component';
import { PivotUtil } from './pivot-util';
import { FilterMode } from '../common/enums';
import { WatchChanges } from '../watch-changes';
import { DropPosition } from '../moving/moving.service';
import { DimensionValuesFilteringStrategy, NoopPivotDimensionsStrategy } from '../../data-operations/pivot-strategy';
import { IgxGridExcelStyleFilteringComponent } from '../filtering/excel-style/grid.excel-style-filtering.component';
import { IgxPivotGridNavigationService } from './pivot-grid-navigation.service';
import { IgxPivotColumnResizingService } from '../resizing/pivot-grid/pivot-resizing.service';
import { IgxOverlayService } from '../../services/public_api';
import { DOCUMENT } from '@angular/common';
import { DisplayDensity, DisplayDensityToken } from '../../core/displayDensity';
import { cloneArray } from '../../core/utils';
import { IgxPivotFilteringService } from './pivot-filtering.service';
import { DataUtil } from '../../data-operations/data-util';
import { IgxGridTransaction } from '../common/types';
import { GridBaseAPIService } from '../api.service';
import { IgxGridForOfDirective } from '../../directives/for-of/for_of.directive';
import { IgxPivotRowDimensionContentComponent } from './pivot-row-dimension-content.component';
import { IgxPivotGridColumnResizerComponent } from '../resizing/pivot-grid/pivot-resizer.component';
import { PivotSortUtil } from './pivot-sort-util';
import * as i0 from "@angular/core";
import * as i1 from "../selection/selection.service";
import * as i2 from "../resizing/pivot-grid/pivot-resizing.service";
import * as i3 from "../api.service";
import * as i4 from "../../services/public_api";
import * as i5 from "./pivot-grid-navigation.service";
import * as i6 from "../filtering/grid-filtering.service";
import * as i7 from "../summaries/grid-summary.service";
import * as i8 from "../../core/utils";
import * as i9 from "../grid.common";
import * as i10 from "../filtering/excel-style/grid.excel-style-filtering.component";
import * as i11 from "../filtering/excel-style/excel-style-search.component";
import * as i12 from "../resizing/pivot-grid/pivot-resizer.component";
import * as i13 from "../moving/moving.drop.directive";
import * as i14 from "../selection/drag-select.directive";
import * as i15 from "@angular/common";
import * as i16 from "../../icon/icon.component";
import * as i17 from "../../directives/toggle/toggle.directive";
import * as i18 from "../../directives/for-of/for_of.directive";
import * as i19 from "../../directives/template-outlet/template_outlet.directive";
import * as i20 from "../../progressbar/progressbar.component";
import * as i21 from "../../snackbar/snackbar.component";
import * as i22 from "./pivot-row.component";
import * as i23 from "./pivot-header-row.component";
import * as i24 from "./pivot-row-dimension-content.component";
import * as i25 from "../common/pipes";
import * as i26 from "./pivot-grid.pipes";
let NEXT_ID = 0;
const MINIMUM_COLUMN_WIDTH = 200;
const MINIMUM_COLUMN_WIDTH_SUPER_COMPACT = 104;
/**
 * Pivot Grid provides a way to present and manipulate data in a pivot table view.
 *
 * @igxModule IgxPivotGridModule
 * @igxGroup Grids & Lists
 * @igxKeywords pivot, grid, table
 * @igxTheme igx-grid-theme
 * @remarks
 * The Ignite UI Pivot Grid is used for grouping and aggregating simple flat data into a pivot table.  Once data
 * has been bound and the dimensions and values configured it can be manipulated via sorting and filtering.
 * @example
 * ```html
 * <igx-pivot-grid [data]="data" [pivotConfiguration]="configuration">
 * </igx-pivot-grid>
 * ```
 */
export class IgxPivotGridComponent extends IgxGridBaseDirective {
    constructor(selectionService, colResizingService, gridAPI, transactionFactory, elementRef, zone, document, cdr, resolver, differs, viewRef, appRef, moduleRef, injector, navigation, filteringService, overlayService, summaryService, _displayDensityOptions, localeId, platform, _diTransactions) {
        super(selectionService, colResizingService, gridAPI, transactionFactory, elementRef, zone, document, cdr, resolver, differs, viewRef, appRef, moduleRef, injector, navigation, filteringService, overlayService, summaryService, _displayDensityOptions, localeId, platform);
        this.selectionService = selectionService;
        this.colResizingService = colResizingService;
        this.transactionFactory = transactionFactory;
        this.document = document;
        this.overlayService = overlayService;
        this.summaryService = summaryService;
        this._displayDensityOptions = _displayDensityOptions;
        this.platform = platform;
        this._diTransactions = _diTransactions;
        /**
         * Emitted when the dimension collection is changed via the grid chip area.
         *
         * @remarks
         * Returns the new dimension collection and its type:
         * @example
         * ```html
         * <igx-pivot-grid #grid [data]="localData" [height]="'305px'"
         *              (dimensionsChange)="dimensionsChange($event)"></igx-grid>
         * ```
         */
        this.dimensionsChange = new EventEmitter();
        /**
         * Emitted when a dimension is sorted.
         *
         * @example
         * ```html
         * <igx-pivot-grid #grid [data]="localData" [height]="'305px'"
         *              (dimensionsSortingExpressionsChange)="dimensionsSortingExpressionsChange($event)"></igx-pivot-grid>
         * ```
         */
        this.dimensionsSortingExpressionsChange = new EventEmitter();
        /**
         * Emitted when the values collection is changed via the grid chip area.
         *
         * @remarks
         * Returns the new dimension
         * @example
         * ```html
         * <igx-pivot-grid #grid [data]="localData" [height]="'305px'"
         *              (valuesChange)="valuesChange($event)"></igx-grid>
         * ```
        */
        this.valuesChange = new EventEmitter();
        this.showPivotConfigurationUI = true;
        /**
         * @hidden @internal
         */
        this.role = 'grid';
        /**
         * @hidden @internal
         */
        this.snackbarDisplayTime = 6000;
        /**
         * @hidden @internal
         */
        this.cellEdit = new EventEmitter();
        /**
         * @hidden @internal
         */
        this.cellEditDone = new EventEmitter();
        /**
         * @hidden @internal
         */
        this.cellEditEnter = new EventEmitter();
        /**
         * @hidden @internal
         */
        this.cellEditExit = new EventEmitter();
        /**
         * @hidden @internal
         */
        this.columnMovingStart = new EventEmitter();
        /**
         * @hidden @internal
         */
        this.columnMoving = new EventEmitter();
        /**
         * @hidden @internal
         */
        this.columnMovingEnd = new EventEmitter();
        /**
         * @hidden @internal
         */
        this.columnPin = new EventEmitter();
        /**
         * @hidden @internal
         */
        this.columnPinned = new EventEmitter();
        /**
         * @hidden @internal
         */
        this.rowAdd = new EventEmitter();
        /**
         * @hidden @internal
         */
        this.rowAdded = new EventEmitter();
        /**
         * @hidden @internal
         */
        this.rowDeleted = new EventEmitter();
        /**
         * @hidden @internal
         */
        this.rowDelete = new EventEmitter();
        /**
         * @hidden @internal
         */
        this.rowDragStart = new EventEmitter();
        /**
         * @hidden @internal
         */
        this.rowDragEnd = new EventEmitter();
        /**
         * @hidden @internal
         */
        this.rowEditEnter = new EventEmitter();
        /**
         * @hidden @internal
         */
        this.rowEdit = new EventEmitter();
        /**
         * @hidden @internal
         */
        this.rowEditDone = new EventEmitter();
        /**
         * @hidden @internal
         */
        this.rowEditExit = new EventEmitter();
        /**
         * @hidden @internal
         */
        this.rowPinning = new EventEmitter();
        /**
         * @hidden @internal
         */
        this.rowPinned = new EventEmitter();
        this.columnGroupStates = new Map();
        this.isPivot = true;
        /**
         * @hidden @internal
         */
        this.dragRowID = null;
        /**
         * @hidden @internal
         */
        this.rowDimensionResizing = true;
        /**
         * @hidden @internal
         */
        this._emptyRowDimension = { memberName: '', enabled: true, level: 0 };
        this._defaultExpandState = false;
        this._filterStrategy = new DimensionValuesFilteringStrategy();
        this._pivotConfiguration = { rows: null, columns: null, values: null, filters: null };
        this.p_id = `igx-pivot-grid-${NEXT_ID++}`;
        this._superCompactMode = false;
        /**
         * @hidden @internal
         */
        this.autoGenerate = true;
        /**
         * @hidden @internal
         */
        this.pageChange = new EventEmitter();
        /**
         * @hidden @internal
         */
        this.pagingDone = new EventEmitter();
        /**
         * @hidden @internal
         */
        this.perPageChange = new EventEmitter();
        /**
         * @hidden @internal
         */
        this.moving = false;
        /**
         * @hidden @internal
         */
        this.toolbarExporting = new EventEmitter();
    }
    /**
     * Gets the sorting expressions generated for the dimensions.
     *
     * @example
     * ```typescript
     * const expressions = this.grid.dimensionsSortingExpressions;
     * ```
     */
    get dimensionsSortingExpressions() {
        const allEnabledDimensions = this.rowDimensions.concat(this.columnDimensions);
        const dimensionsSortingExpressions = PivotSortUtil.generateDimensionSortingExpressions(allEnabledDimensions);
        return dimensionsSortingExpressions;
    }
    set pivotConfiguration(value) {
        this._pivotConfiguration = value;
        this.filteringExpressionsTree = PivotUtil.buildExpressionTree(value);
        if (!this._init) {
            this.setupColumns();
        }
        this.notifyChanges(true);
    }
    get pivotConfiguration() {
        return this._pivotConfiguration || { rows: null, columns: null, values: null, filters: null };
    }
    /**
     * Enables a super compact theme for the component.
     * @remarks
     * Overrides the displayDensity option if one is set.
     * @example
     * ```html
     * <igx-pivot-grid [superCompactMode]="true"></igx-pivot-grid>
     * ```
     */
    get superCompactMode() {
        return this._superCompactMode;
    }
    set superCompactMode(value) {
        Promise.resolve().then(() => {
            // wait for the current detection cycle to end before triggering a new one.
            this._superCompactMode = value;
            this.cdr.detectChanges();
        });
    }
    /**
    * Returns the theme of the component.
    * The default theme is `comfortable`.
    * Available options are `comfortable`, `cosy`, `compact`.
    * @remarks
    * If set while superCompactMode is enabled will have no affect.
    * ```typescript
    * let componentTheme = this.component.displayDensity;
    * ```
    */
    get displayDensity() {
        if (this.superCompactMode) {
            return DisplayDensity.compact;
        }
        return super.displayDensity;
    }
    /**
    * Sets the theme of the component.
    */
    set displayDensity(val) {
        const currentDisplayDensity = this._displayDensity;
        this._displayDensity = val;
        if (currentDisplayDensity !== this._displayDensity) {
            const densityChangedArgs = {
                oldDensity: currentDisplayDensity,
                newDensity: this._displayDensity
            };
            this.onDensityChanged.emit(densityChangedArgs);
        }
    }
    /**
     * @hidden @internal
     */
    get minColumnWidth() {
        if (this.superCompactMode) {
            return MINIMUM_COLUMN_WIDTH_SUPER_COMPACT;
        }
        else {
            return MINIMUM_COLUMN_WIDTH;
        }
    }
    get pivotKeys() {
        return this.pivotConfiguration.pivotKeys || DEFAULT_PIVOT_KEYS;
    }
    /**
    * @hidden @internal
    */
    get rootSummariesEnabled() {
        return false;
    }
    get emptyRowDimension() {
        return this._emptyRowDimension;
    }
    /**
    * Gets/Sets the default expand state for all rows.
    */
    get defaultExpandState() {
        return this._defaultExpandState;
    }
    set defaultExpandState(val) {
        this._defaultExpandState = val;
    }
    /**
     * @hidden @internal
     */
    get pagingMode() {
        return;
    }
    set pagingMode(_val) {
    }
    /**
     * @hidden @internal
     */
    get hideRowSelectors() {
        return;
    }
    set hideRowSelectors(_value) {
    }
    /**
     * @hidden @internal
     */
    get rowDraggable() {
        return;
    }
    set rowDraggable(_val) {
    }
    /**
     * @hidden @internal
     */
    get allowAdvancedFiltering() {
        return false;
    }
    set allowAdvancedFiltering(_value) {
    }
    /**
     * @hidden @internal
     */
    get filterMode() {
        return FilterMode.quickFilter;
    }
    set filterMode(_value) {
    }
    /**
     * @hidden @internal
     */
    get allowFiltering() {
        return false;
    }
    set allowFiltering(_value) {
    }
    /**
     * @hidden @internal
     */
    get isFirstPage() {
        return true;
    }
    /**
     * @hidden @internal
     */
    get isLastPage() {
        return true;
    }
    /**
     * @hidden @internal
     */
    get page() {
        return 0;
    }
    set page(_val) {
    }
    /**
     * @hidden @internal
     */
    get paging() {
        return false;
    }
    set paging(_value) {
    }
    /**
     * @hidden @internal
     */
    get perPage() {
        return;
    }
    set perPage(_val) {
    }
    /**
     * @hidden @internal
     */
    get pinnedColumns() {
        return [];
    }
    /**
    * @hidden @internal
    */
    get unpinnedColumns() {
        return super.unpinnedColumns;
    }
    /**
    * @hidden @internal
    */
    get unpinnedDataView() {
        return super.unpinnedDataView;
    }
    /**
    * @hidden @internal
    */
    get unpinnedWidth() {
        return super.unpinnedWidth;
    }
    /**
     * @hidden @internal
     */
    get pinnedWidth() {
        return super.pinnedWidth;
    }
    /**
     * @hidden @internal
     */
    set summaryRowHeight(_value) {
    }
    get summaryRowHeight() {
        return 0;
    }
    /**
     * @hidden @internal
     */
    get totalPages() {
        return;
    }
    /**
     * @hidden @internal
     */
    get transactions() {
        return this._transactions;
    }
    /**
     * @hidden @internal
     */
    get dragIndicatorIconTemplate() {
        return;
    }
    set dragIndicatorIconTemplate(_val) {
    }
    /**
     * @hidden @internal
     */
    get rowEditable() {
        return;
    }
    set rowEditable(_val) {
    }
    /**
     * @hidden @internal
     */
    get pinning() {
        return {};
    }
    set pinning(_value) {
    }
    /**
     * @hidden @internal
     */
    get summaryPosition() {
        return;
    }
    set summaryPosition(_value) {
    }
    /**
     * @hidden @interal
     */
    get summaryCalculationMode() {
        return;
    }
    set summaryCalculationMode(_value) {
    }
    /**
     * @hidden @interal
     */
    get showSummaryOnCollapse() {
        return;
    }
    set showSummaryOnCollapse(_value) {
    }
    /**
     * @hidden @internal
     */
    get hiddenColumnsCount() {
        return null;
    }
    /**
     * @hidden @internal
     */
    get pinnedColumnsCount() {
        return null;
    }
    /**
     * @hidden @internal
     */
    get batchEditing() {
        return;
    }
    set batchEditing(_val) {
    }
    get selectedRows() {
        if (this.selectionService.getSelectedRows().length === 0) {
            return [];
        }
        const selectedRowIds = [];
        this.dataView.forEach(record => {
            const prev = [];
            for (const dim of this.rowDimensions) {
                let currDim = dim;
                let shouldBreak = false;
                do {
                    const key = PivotUtil.getRecordKey(record, currDim);
                    if (this.selectionService.isPivotRowSelected(key) && !selectedRowIds.find(x => x === record)) {
                        selectedRowIds.push(record);
                        shouldBreak = true;
                        break;
                    }
                    currDim = currDim.childLevel;
                } while (currDim);
                prev.push(dim);
                if (shouldBreak) {
                    break;
                }
            }
        });
        return selectedRowIds;
    }
    /**
     * Gets the default row height.
     *
     * @example
     * ```typescript
     * const rowHeigh = this.grid.defaultRowHeight;
     * ```
     */
    get defaultRowHeight() {
        if (this.superCompactMode) {
            return 24;
        }
        return super.defaultRowHeight;
    }
    /**
     * @hidden
     */
    ngOnInit() {
        // pivot grid always generates columns automatically.
        this.autoGenerate = true;
        super.ngOnInit();
    }
    /**
     * @hidden
     */
    ngAfterContentInit() {
        // ignore any user defined columns and auto-generate based on pivot config.
        this.updateColumns([]);
        Promise.resolve().then(() => {
            this.setupColumns();
        });
    }
    /**
     * @hidden @internal
     */
    ngAfterViewInit() {
        Promise.resolve().then(() => {
            super.ngAfterViewInit();
        });
    }
    /**
     * Notifies for dimension change.
     */
    notifyDimensionChange(regenerateColumns = false) {
        if (regenerateColumns) {
            this.setupColumns();
        }
        this.pipeTrigger++;
        this.cdr.detectChanges();
    }
    /**
     * Gets the full list of dimensions.
     *
     * @example
     * ```typescript
     * const dimensions = this.grid.allDimensions;
     * ```
     */
    get allDimensions() {
        const config = this.pivotConfiguration;
        return (config.rows || []).concat((config.columns || [])).concat(config.filters || []).filter(x => x !== null && x !== undefined);
    }
    /** @hidden @internal */
    createFilterESF(dropdown, column, options, shouldReatach) {
        options.outlet = this.outlet;
        if (dropdown) {
            dropdown.initialize(column, this.overlayService);
            if (shouldReatach) {
                const id = this.overlayService.attach(dropdown.element, options);
                dropdown.overlayComponentId = id;
                return { id, ref: undefined };
            }
            return { id: dropdown.overlayComponentId, ref: undefined };
        }
    }
    /** @hidden */
    featureColumnsWidth() {
        return this.pivotRowWidths;
    }
    /**
     * Gets/Sets the value of the `id` attribute.
     *
     * @remarks
     * If not provided it will be automatically generated.
     * @example
     * ```html
     * <igx-pivot-grid [id]="'igx-pivot-1'" [data]="Data"></igx-pivot-grid>
     * ```
     */
    get id() {
        return this.p_id;
    }
    set id(value) {
        this.p_id = value;
    }
    /**
     * An @Input property that lets you fill the `IgxPivotGridComponent` with an array of data.
     * ```html
     * <igx-pivot-grid [data]="Data"></igx-pivot-grid>
     * ```
     */
    set data(value) {
        this._data = value || [];
        if (!this._init) {
            this.setupColumns();
            this.reflow();
        }
        this.cdr.markForCheck();
        if (this.height === null || this.height.indexOf('%') !== -1) {
            // If the height will change based on how much data there is, recalculate sizes in igxForOf.
            this.notifyChanges(true);
        }
    }
    /**
     * Returns an array of data set to the component.
     * ```typescript
     * let data = this.grid.data;
     * ```
     */
    get data() {
        return this._data;
    }
    /**
     * Sets an array of objects containing the filtered data.
     * ```typescript
     * this.grid.filteredData = [{
     *       ID: 1,
     *       Name: "A"
     * }];
     * ```
     */
    set filteredData(value) {
        this._filteredData = value;
    }
    /**
     * Returns an array of objects containing the filtered data.
     * ```typescript
     * let filteredData = this.grid.filteredData;
     * ```
     *
     * @memberof IgxHierarchicalGridComponent
     */
    get filteredData() {
        return this._filteredData;
    }
    /**
     * @hidden
     */
    getContext(rowData, rowIndex) {
        return {
            $implicit: rowData,
            templateID: {
                type: 'dataRow',
                id: null
            },
            index: this.getDataViewIndex(rowIndex, false)
        };
    }
    /**
     * @hidden @internal
     */
    get pivotRowWidths() {
        return this.rowDimensions.length ? this.rowDimensions.reduce((accumulator, dim) => accumulator + this.rowDimensionWidthToPixels(dim), 0) :
            this.rowDimensionWidthToPixels(this.emptyRowDimension);
    }
    /**
     * @hidden @internal
     */
    rowDimensionWidthToPixels(dim) {
        if (!dim.width) {
            return MINIMUM_COLUMN_WIDTH;
        }
        const isPercent = dim.width && dim.width.indexOf('%') !== -1;
        if (isPercent) {
            return parseFloat(dim.width) / 100 * this.calcWidth;
        }
        else {
            return parseInt(dim.width, 10);
        }
    }
    /**
     * @hidden @internal
     */
    reverseDimensionWidthToPercent(width) {
        return (width * 100 / this.calcWidth);
    }
    get rowDimensions() {
        return this.pivotConfiguration.rows?.filter(x => x.enabled) || [];
    }
    get columnDimensions() {
        return this.pivotConfiguration.columns?.filter(x => x.enabled) || [];
    }
    get filterDimensions() {
        return this.pivotConfiguration.filters?.filter(x => x.enabled) || [];
    }
    get values() {
        return this.pivotConfiguration.values?.filter(x => x.enabled) || [];
    }
    toggleColumn(col) {
        const state = this.columnGroupStates.get(col.field);
        const newState = !state;
        this.columnGroupStates.set(col.field, newState);
        this.toggleRowGroup(col, newState);
        this.reflow();
    }
    /**
     * @hidden @internal
     */
    isRecordPinnedByIndex(_rowIndex) {
        return null;
    }
    /**
     * @hidden @internal
     */
    toggleColumnVisibility(_args) {
        return;
    }
    /**
     * @hidden @internal
     */
    expandAll() {
    }
    /**
     * @hidden @internal
     */
    collapseAll() {
    }
    /**
     * @hidden @internal
     */
    expandRow(_rowID) {
    }
    /**
     * @hidden @internal
     */
    collapseRow(_rowID) {
    }
    /**
     * @hidden @internal
     */
    get pinnedRows() {
        return;
    }
    /**
     * @hidden @internal
     */
    get totalRecords() {
        return;
    }
    set totalRecords(_total) {
    }
    /**
     * @hidden @internal
     */
    moveColumn(_column, _target, _pos = DropPosition.AfterDropTarget) {
    }
    /**
     * @hidden @internal
     */
    addRow(_data) {
    }
    /**
     * @hidden @internal
     */
    deleteRow(_rowSelector) {
    }
    /**
     * @hidden @internal
     */
    updateCell(_value, _rowSelector, _column) {
    }
    /**
     * @hidden @internal
     */
    updateRow(_value, _rowSelector) {
    }
    /**
     * @hidden @internal
     */
    enableSummaries(..._rest) {
    }
    /**
     * @hidden @internal
     */
    disableSummaries(..._rest) {
    }
    /**
     * @hidden @internal
     */
    pinColumn(_columnName, _index) {
        return;
    }
    /**
     * @hidden @internal
     */
    unpinColumn(_columnName, _index) {
        return;
    }
    /**
     * @hidden @internal
     */
    pinRow(_rowID, _index, _row) {
        return;
    }
    /**
     * @hidden @internal
     */
    unpinRow(_rowID, _row) {
        return;
    }
    /**
     * @hidden @internal
     */
    get pinnedRowHeight() {
        return;
    }
    /**
     * @hidden @internal
     */
    get hasEditableColumns() {
        return;
    }
    /**
     * @hidden @internal
     */
    get hasSummarizedColumns() {
        return;
    }
    /**
     * @hidden @internal
     */
    get hasMovableColumns() {
        return;
    }
    /**
     * @hidden @internal
     */
    get pinnedDataView() {
        return [];
    }
    /**
     * @hidden @internal
     */
    openAdvancedFilteringDialog(_overlaySettings) {
    }
    /**
     * @hidden @internal
     */
    closeAdvancedFilteringDialog(_applyChanges) {
    }
    /**
     * @hidden @internal
     */
    endEdit(_commit = true, _event) {
    }
    /**
     * @hidden @internal
     */
    beginAddRowById(_rowID, _asChild) {
    }
    /**
     * @hidden @internal
     */
    beginAddRowByIndex(_index) {
    }
    /**
     * @hidden @internal
     */
    clearSearch() { }
    /**
     * @hidden @internal
     */
    paginate(_val) {
    }
    /**
    * @hidden @internal
    */
    nextPage() {
    }
    /**
    * @hidden @internal
    */
    previousPage() {
    }
    /**
    * @hidden @internal
    */
    refreshSearch(_updateActiveInfo, _endEdit = true) {
        return 0;
    }
    /**
    * @hidden @internal
    */
    findNext(_text, _caseSensitive, _exactMatch) {
        return 0;
    }
    /**
    * @hidden @internal
    */
    findPrev(_text, _caseSensitive, _exactMatch) {
        return 0;
    }
    /**
    * @hidden @internal
    */
    getNextCell(currRowIndex, curVisibleColIndex, callback = null) {
        return super.getNextCell(currRowIndex, curVisibleColIndex, callback);
    }
    /**
    * @hidden @internal
    */
    getPreviousCell(currRowIndex, curVisibleColIndex, callback = null) {
        return super.getPreviousCell(currRowIndex, curVisibleColIndex, callback);
    }
    /**
    * @hidden @internal
    */
    getPinnedWidth(takeHidden = false) {
        return super.getPinnedWidth(takeHidden);
    }
    /**
     * @hidden @internal
     */
    get totalHeight() {
        return this.calcHeight;
    }
    getColumnGroupExpandState(col) {
        const state = this.columnGroupStates.get(col.field);
        // columns are expanded by default?
        return state !== undefined && state !== null ? state : false;
    }
    toggleRowGroup(col, newState) {
        if (!col)
            return;
        if (this.hasMultipleValues) {
            const parentCols = col.parent ? col.parent.children.toArray() : this._autoGeneratedCols.filter(x => x.level === 0);
            const siblingCol = parentCols.filter(x => x.header === col.header && x !== col)[0];
            const currIndex = parentCols.indexOf(col);
            const siblingIndex = parentCols.indexOf(siblingCol);
            if (currIndex < siblingIndex) {
                // clicked on the full hierarchy header
                this.resolveToggle(col, newState);
                siblingCol.headerTemplate = this.headerTemplate;
            }
            else {
                // clicked on summary parent column that contains just the measures
                col.headerTemplate = undefined;
                this.resolveToggle(siblingCol, newState);
            }
        }
        else {
            const parentCols = col.parent ? col.parent.children : this._autoGeneratedCols.filter(x => x.level === 0);
            const fieldColumn = parentCols.filter(x => x.header === col.header && !x.columnGroup)[0];
            const groupColumn = parentCols.filter(x => x.header === col.header && x.columnGroup)[0];
            this.resolveToggle(groupColumn, newState);
            if (newState) {
                fieldColumn.headerTemplate = this.headerTemplate;
            }
            else {
                fieldColumn.headerTemplate = undefined;
            }
        }
    }
    /**
    * @hidden @internal
    */
    setupColumns() {
        super.setupColumns();
    }
    /**
     * Auto-sizes row dimension cells.
     *
     * @remarks
     * Only sizes based on the dimension cells in view.
     * @example
     * ```typescript
     * this.grid.autoSizeRowDimension(dimension);
     * ```
     * @param dimension The row dimension to size.
     */
    autoSizeRowDimension(dimension) {
        if (this.getDimensionType(dimension) === PivotDimensionType.Row) {
            const relatedDims = PivotUtil.flatten([dimension]).map(x => x.memberName);
            const content = this.rowDimensionContentCollection.filter(x => relatedDims.indexOf(x.dimension.memberName) !== -1);
            const headers = content.map(x => x.headerGroups.toArray()).flat().map(x => x.header && x.header.refInstance);
            const autoWidth = this.getLargesContentWidth(headers);
            dimension.width = autoWidth;
            this.pipeTrigger++;
            this.cdr.detectChanges();
        }
    }
    /**
     * Inserts dimension in target collection by type at specified index or at the collection's end.
     *
     * @example
     * ```typescript
     * this.grid.insertDimensionAt(dimension, PivotDimensionType.Row, 1);
     * ```
     * @param dimension The dimension that will be added.
     * @param targetCollectionType The target collection type to add to. Can be Row, Column or Filter.
     * @param index The index in the collection at which to add.
     * This parameter is optional. If not set it will add it to the end of the collection.
     */
    insertDimensionAt(dimension, targetCollectionType, index) {
        const targetCollection = this.getDimensionsByType(targetCollectionType);
        if (index !== undefined) {
            targetCollection.splice(index, 0, dimension);
        }
        else {
            targetCollection.push(dimension);
        }
        if (targetCollectionType === PivotDimensionType.Column) {
            this.setupColumns();
        }
        this.pipeTrigger++;
        this.dimensionsChange.emit({ dimensions: targetCollection, dimensionCollectionType: targetCollectionType });
        if (targetCollectionType === PivotDimensionType.Filter) {
            this.dimensionDataColumns = this.generateDimensionColumns();
            this.reflow();
        }
    }
    /**
     * Move dimension from its currently collection to the specified target collection by type at specified index or at the collection's end.
     *
     * @example
     * ```typescript
     * this.grid.moveDimension(dimension, PivotDimensionType.Row, 1);
     * ```
     * @param dimension The dimension that will be moved.
     * @param targetCollectionType The target collection type to move it to. Can be Row, Column or Filter.
     * @param index The index in the collection at which to add.
     * This parameter is optional. If not set it will add it to the end of the collection.
     */
    moveDimension(dimension, targetCollectionType, index) {
        const prevCollectionType = this.getDimensionType(dimension);
        if (prevCollectionType === null)
            return;
        // remove from old collection
        this._removeDimensionInternal(dimension);
        // add to target
        this.insertDimensionAt(dimension, targetCollectionType, index);
        if (prevCollectionType === PivotDimensionType.Column) {
            this.setupColumns();
        }
    }
    /**
     * Removes dimension from its currently collection.
     * @remarks
     * This is different than toggleDimension that enabled/disables the dimension.
     * This completely removes the specified dimension from the collection.
     * @example
     * ```typescript
     * this.grid.removeDimension(dimension);
     * ```
     * @param dimension The dimension to be removed.
     */
    removeDimension(dimension) {
        const prevCollectionType = this.getDimensionType(dimension);
        this._removeDimensionInternal(dimension);
        if (prevCollectionType === PivotDimensionType.Column) {
            this.setupColumns();
        }
        if (prevCollectionType === PivotDimensionType.Filter) {
            this.reflow();
        }
        this.pipeTrigger++;
        this.cdr.detectChanges();
    }
    /**
     * Toggles the dimension's enabled state on or off.
     * @remarks
     * The dimension remains in its current collection. This just changes its enabled state.
     * @example
     * ```typescript
     * this.grid.toggleDimension(dimension);
     * ```
     * @param dimension The dimension to be toggled.
     */
    toggleDimension(dimension) {
        const dimType = this.getDimensionType(dimension);
        if (dimType === null)
            return;
        const collection = this.getDimensionsByType(dimType);
        dimension.enabled = !dimension.enabled;
        if (dimType === PivotDimensionType.Column) {
            this.setupColumns();
        }
        if (!dimension.enabled && dimension.filter) {
            this.filteringService.clearFilter(dimension.memberName);
        }
        this.pipeTrigger++;
        this.dimensionsChange.emit({ dimensions: collection, dimensionCollectionType: dimType });
        this.cdr.detectChanges();
        if (dimType === PivotDimensionType.Filter) {
            this.reflow();
        }
    }
    /**
     * Inserts value at specified index or at the end.
     *
     * @example
     * ```typescript
     * this.grid.insertValueAt(value, 1);
     * ```
     * @param value The value definition that will be added.
     * @param index The index in the collection at which to add.
     * This parameter is optional. If not set it will add it to the end of the collection.
     */
    insertValueAt(value, index) {
        if (!this.pivotConfiguration.values) {
            this.pivotConfiguration.values = [];
        }
        const values = this.pivotConfiguration.values;
        if (index !== undefined) {
            values.splice(index, 0, value);
        }
        else {
            values.push(value);
        }
        this.setupColumns();
        this.pipeTrigger++;
        this.cdr.detectChanges();
        this.valuesChange.emit({ values });
    }
    /**
     * Move value from its currently at specified index or at the end.
     *
     * @example
     * ```typescript
     * this.grid.moveValue(value, 1);
     * ```
     * @param value The value that will be moved.
     * @param index The index in the collection at which to add.
     * This parameter is optional. If not set it will add it to the end of the collection.
     */
    moveValue(value, index) {
        if (this.pivotConfiguration.values.indexOf(value) === -1)
            return;
        // remove from old index
        this.removeValue(value);
        // add to new
        this.insertValueAt(value, index);
    }
    /**
     * Removes value from collection.
     * @remarks
     * This is different than toggleValue that enabled/disables the value.
     * This completely removes the specified value from the collection.
     * @example
     * ```typescript
     * this.grid.removeValue(dimension);
     * ```
     * @param value The value to be removed.
     */
    removeValue(value) {
        const values = this.pivotConfiguration.values;
        const currentIndex = values.indexOf(value);
        if (currentIndex !== -1) {
            values.splice(currentIndex, 1);
            this.setupColumns();
            this.pipeTrigger++;
            this.valuesChange.emit({ values });
        }
    }
    /**
     * Toggles the value's enabled state on or off.
     * @remarks
     * The value remains in its current collection. This just changes its enabled state.
     * @example
     * ```typescript
     * this.grid.toggleValue(value);
     * ```
     * @param value The value to be toggled.
     */
    toggleValue(value) {
        if (this.pivotConfiguration.values.indexOf(value) === -1)
            return;
        value.enabled = !value.enabled;
        this.setupColumns();
        this.pipeTrigger++;
        this.valuesChange.emit({ values: this.pivotConfiguration.values });
        this.reflow();
    }
    /**
     * Sort the dimension and its children in the provided direction.
     * @example
     * ```typescript
     * this.grid.sortDimension(dimension, SortingDirection.Asc);
     * ```
     * @param value The value to be toggled.
     */
    sortDimension(dimension, sortDirection) {
        const dimensionType = this.getDimensionType(dimension);
        dimension.sortDirection = sortDirection;
        // apply same sort direction to children.
        let dim = dimension;
        while (dim.childLevel) {
            dim.childLevel.sortDirection = dimension.sortDirection;
            dim = dim.childLevel;
        }
        this.pipeTrigger++;
        this.dimensionsSortingExpressionsChange.emit(this.dimensionsSortingExpressions);
        if (dimensionType === PivotDimensionType.Column) {
            this.setupColumns();
        }
        this.cdr.detectChanges();
    }
    /**
     * Filters a single `IPivotDimension`.
     *
     * @example
     * ```typescript
     * public filter() {
     *      const set = new Set();
     *      set.add('Value 1');
     *      set.add('Value 2');
     *      this.grid1.filterDimension(this.pivotConfigHierarchy.rows[0], set, IgxStringFilteringOperand.instance().condition('in'));
     * }
     * ```
     */
    filterDimension(dimension, value, conditionOrExpressionTree) {
        this.filteringService.filter(dimension.memberName, value, conditionOrExpressionTree);
        const dimensionType = this.getDimensionType(dimension);
        if (dimensionType === PivotDimensionType.Column) {
            this.setupColumns();
        }
        this.cdr.detectChanges();
    }
    /**
     * @hidden @internal
     */
    getDimensionsByType(dimension) {
        switch (dimension) {
            case PivotDimensionType.Row:
                if (!this.pivotConfiguration.rows) {
                    this.pivotConfiguration.rows = [];
                }
                return this.pivotConfiguration.rows;
            case PivotDimensionType.Column:
                if (!this.pivotConfiguration.columns) {
                    this.pivotConfiguration.columns = [];
                }
                return this.pivotConfiguration.columns;
            case PivotDimensionType.Filter:
                if (!this.pivotConfiguration.filters) {
                    this.pivotConfiguration.filters = [];
                }
                return this.pivotConfiguration.filters;
            default:
                return null;
        }
    }
    /**
     * @hidden @internal
     */
    resizeRowDimensionPixels(dimension, newWidth) {
        const isPercentageWidth = dimension.width && typeof dimension.width === 'string' && dimension.width.indexOf('%') !== -1;
        if (isPercentageWidth) {
            dimension.width = this.reverseDimensionWidthToPercent(newWidth).toFixed(2) + '%';
        }
        else {
            dimension.width = newWidth + 'px';
        }
        // Notify the grid to reflow, to update if horizontal scrollbar needs to be rendered/removed.
        this.pipeTrigger++;
        this.cdr.detectChanges();
    }
    /*
    * @hidden
    * @internal
    */
    _removeDimensionInternal(dimension) {
        const prevCollectionType = this.getDimensionType(dimension);
        if (prevCollectionType === null)
            return;
        const prevCollection = this.getDimensionsByType(prevCollectionType);
        const currentIndex = prevCollection.indexOf(dimension);
        prevCollection.splice(currentIndex, 1);
        this.pipeTrigger++;
        this.cdr.detectChanges();
    }
    getDimensionType(dimension) {
        return PivotUtil.flatten(this.pivotConfiguration.rows).indexOf(dimension) !== -1 ? PivotDimensionType.Row :
            PivotUtil.flatten(this.pivotConfiguration.columns).indexOf(dimension) !== -1 ? PivotDimensionType.Column :
                (!!this.pivotConfiguration.filters && PivotUtil.flatten(this.pivotConfiguration.filters).indexOf(dimension) !== -1) ?
                    PivotDimensionType.Filter : null;
    }
    getLargesContentWidth(contents) {
        const largest = new Map();
        if (contents.length > 0) {
            const cellsContentWidths = [];
            contents.forEach((elem) => cellsContentWidths.push(this.getHeaderCellWidth(elem.nativeElement).width));
            const index = cellsContentWidths.indexOf(Math.max(...cellsContentWidths));
            const cellStyle = this.document.defaultView.getComputedStyle(contents[index].nativeElement);
            const cellPadding = parseFloat(cellStyle.paddingLeft) + parseFloat(cellStyle.paddingRight) +
                parseFloat(cellStyle.borderLeftWidth) + parseFloat(cellStyle.borderRightWidth);
            largest.set(Math.max(...cellsContentWidths), cellPadding);
        }
        const largestCell = Math.max(...Array.from(largest.keys()));
        const width = Math.ceil(largestCell + largest.get(largestCell));
        if (Number.isNaN(width)) {
            return null;
        }
        else {
            return width + 'px';
        }
    }
    /**
    * @hidden
    */
    get hasMultipleValues() {
        return this.values.length > 1;
    }
    /**
    * @hidden
    */
    get excelStyleFilterMaxHeight() {
        // max 10 rows, row size depends on density
        const maxHeight = this.renderedRowHeight * 10;
        return `${maxHeight}px`;
    }
    /**
    * @hidden
    */
    get excelStyleFilterMinHeight() {
        // min 5 rows, row size depends on density
        const minHeight = this.renderedRowHeight * 5;
        return `${minHeight}px`;
    }
    resolveToggle(groupColumn, state) {
        if (!groupColumn)
            return;
        groupColumn.hidden = state;
        this.columnGroupStates.set(groupColumn.field, state);
        const childrenTotal = this.hasMultipleValues ?
            groupColumn.children.filter(x => x.columnGroup && x.children.filter(y => !y.columnGroup).length === this.values.length) :
            groupColumn.children.filter(x => !x.columnGroup);
        const childrenSubgroups = this.hasMultipleValues ?
            groupColumn.children.filter(x => x.columnGroup && x.children.filter(y => !y.columnGroup).length === 0) :
            groupColumn.children.filter(x => x.columnGroup);
        childrenTotal.forEach(group => {
            const newState = this.columnGroupStates.get(group.field) || state;
            if (newState) {
                group.headerTemplate = this.headerTemplate;
            }
            else {
                group.headerTemplate = undefined;
            }
        });
        if (!groupColumn.hidden && childrenSubgroups.length > 0) {
            childrenSubgroups.forEach(group => {
                const newState = this.columnGroupStates.get(group.field) || state;
                this.resolveToggle(group, newState);
            });
        }
    }
    /**
     * @hidden
     * @internal
     */
    calcGridHeadRow() {
    }
    buildDataView(data) {
        this._dataView = data;
    }
    /**
     * @hidden @internal
     */
    getDataBasedBodyHeight() {
        const dvl = this.dataView?.length || 0;
        return dvl < this._defaultTargetRecordNumber ? 0 : this.defaultTargetBodyHeight;
    }
    horizontalScrollHandler(event) {
        const scrollLeft = event.target.scrollLeft;
        this.theadRow.headerContainers.forEach(headerForOf => {
            headerForOf.onHScroll(scrollLeft);
        });
        super.horizontalScrollHandler(event);
    }
    verticalScrollHandler(event) {
        this.verticalRowDimScrollContainers.forEach(x => {
            x.onScroll(event);
        });
        super.verticalScrollHandler(event);
    }
    /**
     * @hidden
     */
    autogenerateColumns() {
        let columns = [];
        const data = this.gridAPI.filterDataByExpressions(this.filteringExpressionsTree);
        this.dimensionDataColumns = this.generateDimensionColumns();
        const flattenedColumnsWithSorting = PivotUtil.flatten(this.columnDimensions).filter(dim => dim.sortDirection);
        const expressions = flattenedColumnsWithSorting.length > 0 ? PivotSortUtil.generateDimensionSortingExpressions(flattenedColumnsWithSorting) : [];
        let sortedData = data;
        if (expressions.length > 0) {
            sortedData = DataUtil.sort(cloneArray(data), expressions, this.sortStrategy, this);
        }
        let fieldsMap;
        if (this.pivotConfiguration.columnStrategy && this.pivotConfiguration.columnStrategy instanceof NoopPivotDimensionsStrategy) {
            const fields = this.generateDataFields(sortedData);
            if (fields.length === 0)
                return;
            const rowFields = PivotUtil.flatten(this.pivotConfiguration.rows).map(x => x.memberName);
            const keyFields = Object.values(this.pivotKeys);
            const filteredFields = fields.filter(x => rowFields.indexOf(x) === -1 && keyFields.indexOf(x) === -1 &&
                x.indexOf(this.pivotKeys.rowDimensionSeparator + this.pivotKeys.level) === -1 &&
                x.indexOf(this.pivotKeys.rowDimensionSeparator + this.pivotKeys.records) === -1);
            fieldsMap = this.generateFromData(filteredFields);
        }
        else {
            fieldsMap = PivotUtil.getFieldsHierarchy(sortedData, this.columnDimensions, PivotDimensionType.Column, this.pivotKeys);
        }
        columns = this.generateColumnHierarchy(fieldsMap, sortedData);
        this._autoGeneratedCols = columns;
        // reset expansion states if any are stored.
        this.columnGroupStates.forEach((value, key) => {
            if (value) {
                const primaryColumn = columns.find(x => x.field === key && x.headerTemplate === this.headerTemplate);
                const groupSummaryColumn = columns.find(x => x.field === key && x.headerTemplate !== this.headerTemplate);
                this.toggleRowGroup(primaryColumn, value);
                if (groupSummaryColumn) {
                    groupSummaryColumn.headerTemplate = this.headerTemplate;
                }
            }
        });
        this.updateColumns(columns);
        this.reflow();
        if (data && data.length > 0) {
            this.shouldGenerate = false;
        }
    }
    getComponentDensityClass(baseStyleClass) {
        if (this.superCompactMode) {
            return `${baseStyleClass}--${DisplayDensity.compact} igx-grid__pivot--super-compact`;
        }
        return super.getComponentDensityClass(baseStyleClass);
    }
    generateDimensionColumns() {
        const rootFields = this.allDimensions.map(x => x.memberName);
        const columns = [];
        const factory = this.resolver.resolveComponentFactory(IgxColumnComponent);
        rootFields.forEach((field) => {
            const ref = factory.create(this.viewRef.injector);
            ref.instance.field = field;
            ref.changeDetectorRef.detectChanges();
            columns.push(ref.instance);
        });
        return columns;
    }
    generateFromData(fields) {
        const separator = this.pivotKeys.columnDimensionSeparator;
        const dataArr = fields.map(x => x.split(separator)).sort(x => x.length);
        const hierarchy = new Map();
        dataArr.forEach(arr => {
            let currentHierarchy = hierarchy;
            const path = [];
            for (const val of arr) {
                path.push(val);
                const newPath = path.join(separator);
                let targetHierarchy = currentHierarchy.get(newPath);
                if (!targetHierarchy) {
                    currentHierarchy.set(newPath, { value: newPath, expandable: true, children: new Map(), dimension: this.columnDimensions[0] });
                    targetHierarchy = currentHierarchy.get(newPath);
                }
                currentHierarchy = targetHierarchy.children;
            }
        });
        return hierarchy;
    }
    generateColumnHierarchy(fields, data, parent = null) {
        const factoryColumn = this.resolver.resolveComponentFactory(IgxColumnComponent);
        let columns = [];
        if (fields.size === 0) {
            this.values.forEach((value) => {
                const ref = factoryColumn.create(this.viewRef.injector);
                ref.instance.header = value.displayName;
                ref.instance.field = value.member;
                ref.instance.parent = parent;
                ref.instance.sortable = true;
                ref.instance.dataType = value.dataType || this.resolveDataTypes(data[0][value.member]);
                ref.instance.formatter = value.formatter;
                columns.push(ref.instance);
            });
            return columns;
        }
        let currentFields = fields;
        currentFields.forEach((value) => {
            let shouldGenerate = true;
            if (data.length === 0) {
                shouldGenerate = false;
            }
            if (shouldGenerate && (value.children == null || value.children.length === 0 || value.children.size === 0)) {
                const col = this.createColumnForDimension(value, data, parent, this.hasMultipleValues);
                columns.push(col);
                if (this.hasMultipleValues) {
                    const measureChildren = this.getMeasureChildren(factoryColumn, data, col, false, value.dimension.width);
                    col.children.reset(measureChildren);
                    columns = columns.concat(measureChildren);
                }
            }
            else if (shouldGenerate) {
                const col = this.createColumnForDimension(value, data, parent, true);
                if (value.expandable) {
                    col.headerTemplate = this.headerTemplate;
                }
                const children = this.generateColumnHierarchy(value.children, data, col);
                const filteredChildren = children.filter(x => x.level === col.level + 1);
                columns.push(col);
                if (this.hasMultipleValues) {
                    let measureChildren = this.getMeasureChildren(factoryColumn, data, col, true, value.dimension.width);
                    const nestedChildren = filteredChildren;
                    //const allChildren = children.concat(measureChildren);
                    col.children.reset(nestedChildren);
                    columns = columns.concat(children);
                    if (value.dimension.childLevel) {
                        const sibling = this.createColumnForDimension(value, data, parent, true);
                        columns.push(sibling);
                        measureChildren = this.getMeasureChildren(factoryColumn, data, sibling, false, value.dimension?.width);
                        sibling.children.reset(measureChildren);
                        columns = columns.concat(measureChildren);
                    }
                }
                else {
                    col.children.reset(filteredChildren);
                    columns = columns.concat(children);
                    if (value.dimension.childLevel) {
                        const sibling = this.createColumnForDimension(value, data, parent, false);
                        columns.push(sibling);
                    }
                }
            }
        });
        return columns;
    }
    createColumnForDimension(value, data, parent, isGroup) {
        const factoryColumn = this.resolver.resolveComponentFactory(IgxColumnComponent);
        const factoryColumnGroup = this.resolver.resolveComponentFactory(IgxColumnGroupComponent);
        const key = value.value;
        const ref = isGroup ?
            factoryColumnGroup.create(this.viewRef.injector) :
            factoryColumn.create(this.viewRef.injector);
        ref.instance.header = parent != null ? key.split(parent.header + this.pivotKeys.columnDimensionSeparator)[1] : key;
        ref.instance.field = key;
        ref.instance.parent = parent;
        if (value.dimension.width) {
            ref.instance.width = value.dimension.width;
        }
        const valueDefinition = this.values[0];
        ref.instance.dataType = valueDefinition?.dataType || this.resolveDataTypes(data[0][valueDefinition?.member]);
        ref.instance.formatter = valueDefinition?.formatter;
        ref.instance.sortable = true;
        ref.changeDetectorRef.detectChanges();
        return ref.instance;
    }
    resolveColumnDimensionWidth(dim) {
        if (dim.width) {
            return dim.width;
        }
        return this.minColumnWidth + 'px';
    }
    getMeasureChildren(colFactory, data, parent, hidden, parentWidth) {
        const cols = [];
        const count = this.values.length;
        const childWidth = parseInt(parentWidth, 10) / count;
        const isPercent = parentWidth && parentWidth.indexOf('%') !== -1;
        this.values.forEach(val => {
            const ref = colFactory.create(this.viewRef.injector);
            ref.instance.header = val.displayName || val.member;
            ref.instance.field = parent.field + this.pivotKeys.columnDimensionSeparator + val.member;
            ref.instance.parent = parent;
            if (parentWidth) {
                ref.instance.width = isPercent ? childWidth + '%' : childWidth + 'px';
            }
            ref.instance.hidden = hidden;
            ref.instance.sortable = true;
            ref.instance.dataType = val.dataType || this.resolveDataTypes(data[0][val.member]);
            ref.instance.formatter = val.formatter;
            ref.changeDetectorRef.detectChanges();
            cols.push(ref.instance);
        });
        return cols;
    }
    /**
    * @hidden @internal
    */
    get template() {
        const allEnabledDimensions = this.rowDimensions.concat(this.columnDimensions);
        if (allEnabledDimensions.length === 0 && this.values.length === 0) {
            // no enabled values and dimensions
            return this.emptyPivotGridTemplate || this.defaultEmptyPivotGridTemplate;
        }
        super.template;
    }
}
IgxPivotGridComponent.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "14.0.0", ngImport: i0, type: IgxPivotGridComponent, deps: [{ token: i1.IgxGridSelectionService }, { token: i2.IgxPivotColumnResizingService }, { token: i3.GridBaseAPIService }, { token: i4.IgxFlatTransactionFactory }, { token: i0.ElementRef }, { token: i0.NgZone }, { token: DOCUMENT }, { token: i0.ChangeDetectorRef }, { token: i0.ComponentFactoryResolver }, { token: i0.IterableDiffers }, { token: i0.ViewContainerRef }, { token: i0.ApplicationRef }, { token: i0.NgModuleRef }, { token: i0.Injector }, { token: i5.IgxPivotGridNavigationService }, { token: i6.IgxFilteringService }, { token: IgxOverlayService }, { token: i7.IgxGridSummaryService }, { token: DisplayDensityToken, optional: true }, { token: LOCALE_ID }, { token: i8.PlatformUtil }, { token: IgxGridTransaction, optional: true }], target: i0.ɵɵFactoryTarget.Component });
IgxPivotGridComponent.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "14.0.0", version: "14.0.0", type: IgxPivotGridComponent, selector: "igx-pivot-grid", inputs: { pivotConfiguration: "pivotConfiguration", showPivotConfigurationUI: "showPivotConfigurationUI", superCompactMode: "superCompactMode", displayDensity: "displayDensity", addRowEmptyTemplate: "addRowEmptyTemplate", snackbarDisplayTime: "snackbarDisplayTime", defaultExpandState: "defaultExpandState", pagingMode: "pagingMode", hideRowSelectors: "hideRowSelectors", rowDraggable: "rowDraggable", allowAdvancedFiltering: "allowAdvancedFiltering", filterMode: "filterMode", allowFiltering: "allowFiltering", page: "page", paging: "paging", perPage: "perPage", summaryRowHeight: "summaryRowHeight", rowEditable: "rowEditable", pinning: "pinning", summaryPosition: "summaryPosition", summaryCalculationMode: "summaryCalculationMode", showSummaryOnCollapse: "showSummaryOnCollapse", batchEditing: "batchEditing", id: "id", data: "data", totalRecords: "totalRecords", emptyPivotGridTemplate: "emptyPivotGridTemplate" }, outputs: { dimensionsChange: "dimensionsChange", dimensionsSortingExpressionsChange: "dimensionsSortingExpressionsChange", valuesChange: "valuesChange", cellEdit: "cellEdit", cellEditDone: "cellEditDone", cellEditEnter: "cellEditEnter", cellEditExit: "cellEditExit", columnMovingStart: "columnMovingStart", columnMoving: "columnMoving", columnMovingEnd: "columnMovingEnd", columnPin: "columnPin", columnPinned: "columnPinned", rowAdd: "rowAdd", rowAdded: "rowAdded", rowDeleted: "rowDeleted", rowDelete: "rowDelete", rowDragStart: "rowDragStart", rowDragEnd: "rowDragEnd", rowEditEnter: "rowEditEnter", rowEdit: "rowEdit", rowEditDone: "rowEditDone", rowEditExit: "rowEditExit", rowPinning: "rowPinning", rowPinned: "rowPinned" }, host: { properties: { "attr.role": "this.role", "class.igx-grid__pivot--super-compact": "this.superCompactMode", "attr.id": "this.id" } }, providers: [
        IgxGridCRUDService,
        IgxGridSummaryService,
        IgxGridSelectionService,
        GridBaseAPIService,
        { provide: IGX_GRID_BASE, useExisting: IgxPivotGridComponent },
        { provide: IgxFilteringService, useClass: IgxPivotFilteringService },
        IgxPivotGridNavigationService,
        IgxPivotColumnResizingService,
        IgxForOfSyncService,
        IgxForOfScrollSyncService
    ], viewQueries: [{ propertyName: "theadRow", first: true, predicate: IgxPivotHeaderRowComponent, descendants: true, static: true }, { propertyName: "recordTemplate", first: true, predicate: ["record_template"], descendants: true, read: TemplateRef, static: true }, { propertyName: "headerTemplate", first: true, predicate: ["headerTemplate"], descendants: true, read: TemplateRef, static: true }, { propertyName: "resizeLine", first: true, predicate: IgxPivotGridColumnResizerComponent, descendants: true }, { propertyName: "defaultEmptyPivotGridTemplate", first: true, predicate: ["emptyPivotGridTemplate"], descendants: true, read: TemplateRef, static: true }, { propertyName: "excelStyleFilteringComponents", predicate: IgxGridExcelStyleFilteringComponent, descendants: true, read: IgxGridExcelStyleFilteringComponent }, { propertyName: "rowDimensionContentCollection", predicate: IgxPivotRowDimensionContentComponent, descendants: true }, { propertyName: "verticalRowDimScrollContainers", predicate: ["verticalRowDimScrollContainer"], descendants: true, read: IgxGridForOfDirective }], usesInheritance: true, ngImport: i0, template: "<!-- Toolbar area -->\n<ng-content select=\"igx-grid-toolbar\"></ng-content>\n\n<!-- Grid table head row area -->\n<igx-pivot-header-row class=\"igx-grid-thead igx-grid-thead--pivot\" tabindex=\"0\"\n    [grid]=\"this\"\n    [hasMRL]=\"hasColumnLayouts\"\n    [density]=\"displayDensity\"\n    [activeDescendant]=\"activeDescendant\"\n    [width]=\"calcWidth\"\n    [pinnedColumnCollection]=\"pinnedColumns\"\n    [unpinnedColumnCollection]=\"unpinnedColumns\"\n    (keydown.meta.c)=\"copyHandler($event)\"\n    (keydown.control.c)=\"copyHandler($event)\"\n    (copy)=\"copyHandler($event)\"\n    (keydown)=\"navigation.headerNavigation($event)\"\n    (scroll)=\"preventHeaderScroll($event)\"\n>\n</igx-pivot-header-row>\n\n<div igxGridBody (keydown.control.c)=\"copyHandler($event)\" (copy)=\"copyHandler($event)\" class=\"igx-grid__tbody\" role=\"rowgroup\">\n    <ng-container *ngTemplateOutlet=\"rowDimensions.length ? defaultRowDimensionsTemplate : emptyRowDimensionsTemplate; context: this\"></ng-container>\n    <div class=\"igx-grid__tbody-content\" tabindex=\"0\" [attr.role]=\"dataView.length ? null : 'row'\" (keydown)=\"navigation.handleNavigation($event)\" (focus)=\"navigation.focusTbody($event)\"\n        (dragStop)=\"selectionService.dragMode = $event\" (scroll)='preventContainerScroll($event)'\n        (dragScroll)=\"dragScroll($event)\" [igxGridDragSelect]=\"selectionService.dragMode\"\n        [style.height.px]='totalHeight' [style.width.px]='calcWidth || null' #tbody [attr.aria-activedescendant]=\"activeDescendant\">\n        <span *ngIf=\"hasMovableColumns && columnInDrag && pinnedColumns.length <= 0\"\n            [igxColumnMovingDrop]=\"headerContainer\" [attr.droppable]=\"true\" id=\"left\"\n            class=\"igx-grid__scroll-on-drag-left\"></span>\n        <span *ngIf=\"hasMovableColumns && columnInDrag && pinnedColumns.length > 0\"\n            [igxColumnMovingDrop]=\"headerContainer\" [attr.droppable]=\"true\" id=\"left\"\n            class=\"igx-grid__scroll-on-drag-pinned\" [style.left.px]=\"pinnedWidth\"></span>\n        <ng-template igxGridFor let-rowData [igxGridForOf]=\"data\n        | pivotGridFilter:pivotConfiguration:filterStrategy:advancedFilteringExpressionsTree:filteringPipeTrigger:pipeTrigger\n        | pivotGridSort:pivotConfiguration:sortStrategy:pipeTrigger\n        | pivotGridRow:pivotConfiguration:expansionStates:pipeTrigger:sortingExpressions\n        | pivotGridColumn:pivotConfiguration:expansionStates:pipeTrigger:sortingExpressions\n        | pivotGridAutoTransform:pivotConfiguration:pipeTrigger\n        | pivotGridColumnSort:sortingExpressions:sortStrategy:pipeTrigger\n        | pivotGridRowExpansion:pivotConfiguration:expansionStates:defaultExpandState:pipeTrigger\"\n            let-rowIndex=\"index\" [igxForScrollOrientation]=\"'vertical'\" [igxForScrollContainer]='verticalScroll'\n            [igxForContainerSize]='calcHeight'\n            [igxForItemSize]=\"hasColumnLayouts ? rowHeight * multiRowLayoutRowSize + 1 : renderedRowHeight\"\n            [igxGridForOfVariableSizes]='false'\n            #verticalScrollContainer>\n            <ng-template\n                [igxTemplateOutlet]='recordTemplate'\n                [igxTemplateOutletContext]='getContext(rowData, rowIndex)'\n                (cachedViewLoaded)='cachedViewLoaded($event)'>\n            </ng-template>\n        </ng-template>\n        <ng-template #record_template let-rowIndex=\"index\" let-rowData>\n            <igx-pivot-row [style.height.px]=\"renderedRowHeight\" [gridID]=\"id\" [index]=\"rowIndex\" [data]=\"rowData\"\n                [ngClass]=\"rowClasses | igxGridRowClasses:row:row.inEditMode:row.selected:row.dirty:row.deleted:row.dragging:rowIndex:hasColumnLayouts:false:rowData:pipeTrigger\"\n                [ngStyle]=\"rowStyles | igxGridRowStyles:rowData:rowIndex:pipeTrigger\" #row>\n            </igx-pivot-row>\n        </ng-template>\n\n        <ng-container *ngTemplateOutlet=\"template\"></ng-container>\n        <igc-trial-watermark></igc-trial-watermark>\n    </div>\n    <div igxToggle #loadingOverlay>\n        <igx-circular-bar [indeterminate]=\"true\" *ngIf='shouldOverlayLoading'>\n        </igx-circular-bar>\n    </div>\n    <span *ngIf=\"hasMovableColumns && columnInDrag\" [igxColumnMovingDrop]=\"headerContainer\" [attr.droppable]=\"true\"\n        id=\"right\" class=\"igx-grid__scroll-on-drag-right\"></span>\n    <div [hidden]='!hasVerticalScroll()' class=\"igx-grid__tbody-scrollbar\" [style.width.px]=\"scrollSize\" (pointerdown)=\"$event.preventDefault()\">\n        <div class=\"igx-grid__tbody-scrollbar-start\" [style.height.px]=' isRowPinningToTop ? pinnedRowHeight : 0'></div>\n        <div class=\"igx-grid__tbody-scrollbar-main\" [style.height.px]='calcHeight'>\n            <ng-template igxGridFor [igxGridForOf]='[]' #verticalScrollHolder></ng-template>\n        </div>\n        <div class=\"igx-grid__tbody-scrollbar-end\" [style.height.px]='!isRowPinningToTop ? pinnedRowHeight : 0'></div>\n    </div>\n\n    <div class=\"igx-grid__addrow-snackbar\">\n        <igx-snackbar #addRowSnackbar [outlet]=\"igxBodyOverlayOutlet\" [actionText]=\"resourceStrings.igx_grid_snackbar_addrow_actiontext\" [displayTime]='snackbarDisplayTime'>{{resourceStrings.igx_grid_snackbar_addrow_label}}</igx-snackbar>\n    </div>\n\n    <div #igxBodyOverlayOutlet=\"overlay-outlet\" igxOverlayOutlet></div>\n</div>\n\n<div class=\"igx-grid__scroll\" [style.height.px]=\"scrollSize\" #scr [hidden]=\"isHorizontalScrollHidden\" (pointerdown)=\"$event.preventDefault()\">\n    <div class=\"igx-grid__scroll-start\" [style.width.px]='isPinningToStart ? pinnedWidth : headerFeaturesWidth' [style.min-width.px]='isPinningToStart ? pinnedWidth : headerFeaturesWidth'></div>\n    <div class=\"igx-grid__scroll-main\" [style.width.px]='unpinnedWidth'>\n        <ng-template igxGridFor [igxGridForOf]='EMPTY_DATA' #scrollContainer>\n        </ng-template>\n    </div>\n    <div class=\"igx-grid__scroll-end\" [style.float]='\"right\"' [style.width.px]='pinnedWidth' [style.min-width.px]='pinnedWidth' [hidden]=\"pinnedWidth === 0 || isPinningToStart\"></div>\n</div>\n\n<div class=\"igx-grid__tfoot\" role=\"rowgroup\" #tfoot>\n</div>\n\n<div class=\"igx-grid__footer\" #footer>\n    <ng-content select=\"igx-grid-footer\"></ng-content>\n</div>\n\n<ng-template #emptyFilteredGrid>\n    <span class=\"igx-grid__tbody-message\" role=\"cell\">\n        <span>{{emptyFilteredGridMessage}}</span>\n    </span>\n</ng-template>\n\n<ng-template #defaultEmptyGrid>\n    <span class=\"igx-grid__tbody-message\" role=\"cell\">\n        <span>{{emptyGridMessage}}</span>\n    </span>\n</ng-template>\n\n<ng-template #defaultLoadingGrid>\n    <div class=\"igx-grid__loading\">\n        <igx-circular-bar [indeterminate]=\"true\">\n        </igx-circular-bar>\n    </div>\n</ng-template>\n<igx-pivot-grid-column-resizer [restrictResizerTop]=\"theadRow.nativeElement.clientHeight\" *ngIf=\"colResizingService.showResizer\"></igx-pivot-grid-column-resizer>\n<div class=\"igx-grid__loading-outlet\" #igxLoadingOverlayOutlet igxOverlayOutlet></div>\n<div class=\"igx-grid__outlet\" #igxFilteringOverlayOutlet igxOverlayOutlet></div>\n\n<ng-template #headerTemplate let-column>\n    <div class=\"igx-grid__tr--header\">\n        <igx-icon [attr.draggable]=\"false\"\n                  (click)=\"toggleColumn(column)\">\n                  {{getColumnGroupExpandState(column) ? 'chevron_right' : 'expand_more'}}</igx-icon>\n        {{column.header}}\n    </div>\n</ng-template>\n\n<ng-template #defaultRowDimensionsTemplate>\n    <div tabindex=\"0\" [style.height.px]='totalHeight' *ngFor='let dim of rowDimensions; let dimIndex = index;' #rowDimensionContainer role=\"rowgroup\" class='igx-grid__tbody-pivot-dimension' (focus)=\"navigation.focusTbody($event)\" (keydown)=\"navigation.handleNavigation($event)\">\n        <ng-template igxGridFor let-rowData [igxGridForOf]=\"dataView\n        | pivotGridCellMerging:pivotConfiguration:dim:pipeTrigger\"\n                     let-rowIndex=\"index\" [igxForScrollOrientation]=\"'vertical'\" [igxForScrollContainer]='verticalScroll'\n                     [igxForContainerSize]='calcHeight'\n                     [igxForItemSize]=\"renderedRowHeight\"\n                     [igxForSizePropName]='\"height\"'\n                     #verticalRowDimScrollContainer>\n            <igx-pivot-row-dimension-content role='row' class=\"igx-grid-thead\" [grid]=\"this\"\n                                             [dimension]='rowData.dimensions[dimIndex]'\n                                             [rootDimension]='dim'\n                                             [style.height.px]=\"renderedRowHeight * (rowData.rowSpan || 1)\"\n                                             [rowIndex]='rowIndex' [rowData]='rowData'\n                                             [density]=\"displayDensity\" [width]=\"rowDimensionWidthToPixels(dim)\">\n            </igx-pivot-row-dimension-content>\n        </ng-template>\n    </div>\n</ng-template>\n<ng-template #emptyRowDimensionsTemplate>\n    <div tabindex=\"0\" *ngIf='columnDimensions.length > 0 || values.length > 0' #rowDimensionContainer role=\"rowgroup\" class='igx-grid__tbody-pivot-dimension' (focus)=\"navigation.focusTbody($event)\" (keydown)=\"navigation.handleNavigation($event)\">\n        <igx-pivot-row-dimension-content role='row' class=\"igx-grid-thead\" [grid]=\"this\"\n            [dimension]='emptyRowDimension'\n            [rootDimension]='emptyRowDimension'\n            [rowIndex]='0' [rowData]='dataView[0]'\n            [density]=\"displayDensity\" [width]=\"rowDimensionWidthToPixels(emptyRowDimension)\">\n        </igx-pivot-row-dimension-content>\n    </div>\n</ng-template>\n\n<ng-template #emptyPivotGridTemplate>\n    <span class=\"igx-grid__tbody-message\" role=\"cell\">\n        <span>{{resourceStrings.igx_grid_pivot_empty_message}}</span>\n    </span>\n</ng-template>\n\n<div [hidden]='true'>\n    <igx-grid-excel-style-filtering [maxHeight]='excelStyleFilterMaxHeight' [minHeight]='excelStyleFilterMinHeight'>\n        <div igxExcelStyleColumnOperations [hidden]='true'></div>\n        <igx-excel-style-filter-operations>\n            <igx-excel-style-search></igx-excel-style-search>\n        </igx-excel-style-filter-operations>\n    </igx-grid-excel-style-filtering>\n</div>\n", dependencies: [{ kind: "directive", type: i9.IgxGridBodyDirective, selector: "[igxGridBody]" }, { kind: "component", type: i10.IgxGridExcelStyleFilteringComponent, selector: "igx-grid-excel-style-filtering", inputs: ["column", "minHeight", "maxHeight"], outputs: ["loadingStart", "loadingEnd", "initialized", "sortingChanged", "columnChange", "listDataLoaded"] }, { kind: "directive", type: i10.IgxExcelStyleColumnOperationsTemplateDirective, selector: "igx-excel-style-column-operations,[igxExcelStyleColumnOperations]" }, { kind: "directive", type: i10.IgxExcelStyleFilterOperationsTemplateDirective, selector: "igx-excel-style-filter-operations,[igxExcelStyleFilterOperations]" }, { kind: "component", type: i11.IgxExcelStyleSearchComponent, selector: "igx-excel-style-search" }, { kind: "component", type: i12.IgxPivotGridColumnResizerComponent, selector: "igx-pivot-grid-column-resizer" }, { kind: "directive", type: i13.IgxColumnMovingDropDirective, selector: "[igxColumnMovingDrop]", inputs: ["igxColumnMovingDrop"] }, { kind: "directive", type: i14.IgxGridDragSelectDirective, selector: "[igxGridDragSelect]", inputs: ["igxGridDragSelect"], outputs: ["dragStop", "dragScroll"] }, { kind: "directive", type: i15.NgClass, selector: "[ngClass]", inputs: ["class", "ngClass"] }, { kind: "directive", type: i15.NgForOf, selector: "[ngFor][ngForOf]", inputs: ["ngForOf", "ngForTrackBy", "ngForTemplate"] }, { kind: "directive", type: i15.NgIf, selector: "[ngIf]", inputs: ["ngIf", "ngIfThen", "ngIfElse"] }, { kind: "directive", type: i15.NgTemplateOutlet, selector: "[ngTemplateOutlet]", inputs: ["ngTemplateOutletContext", "ngTemplateOutlet", "ngTemplateOutletInjector"] }, { kind: "directive", type: i15.NgStyle, selector: "[ngStyle]", inputs: ["ngStyle"] }, { kind: "component", type: i16.IgxIconComponent, selector: "igx-icon", inputs: ["family", "active", "name"] }, { kind: "directive", type: i17.IgxToggleDirective, selector: "[igxToggle]", inputs: ["id"], outputs: ["opened", "opening", "closed", "closing", "appended"], exportAs: ["toggle"] }, { kind: "directive", type: i17.IgxOverlayOutletDirective, selector: "[igxOverlayOutlet]", exportAs: ["overlay-outlet"] }, { kind: "directive", type: i18.IgxGridForOfDirective, selector: "[igxGridFor][igxGridForOf]", inputs: ["igxGridForOf", "igxGridForOfUniqueSizeCache", "igxGridForOfVariableSizes"], outputs: ["dataChanging"] }, { kind: "directive", type: i19.IgxTemplateOutletDirective, selector: "[igxTemplateOutlet]", inputs: ["igxTemplateOutletContext", "igxTemplateOutlet"], outputs: ["viewCreated", "viewMoved", "cachedViewLoaded", "beforeViewDetach"] }, { kind: "component", type: i20.IgxCircularProgressBarComponent, selector: "igx-circular-bar", inputs: ["id", "isIndeterminate", "textVisibility", "text"] }, { kind: "component", type: i21.IgxSnackbarComponent, selector: "igx-snackbar", inputs: ["id", "actionText", "positionSettings"], outputs: ["clicked", "animationStarted", "animationDone"] }, { kind: "component", type: i22.IgxPivotRowComponent, selector: "igx-pivot-row", inputs: ["selected", "data"] }, { kind: "component", type: i23.IgxPivotHeaderRowComponent, selector: "igx-pivot-header-row" }, { kind: "component", type: i24.IgxPivotRowDimensionContentComponent, selector: "igx-pivot-row-dimension-content", inputs: ["rowIndex", "dimension", "rootDimension", "rowData"] }, { kind: "pipe", type: i25.IgxGridRowClassesPipe, name: "igxGridRowClasses" }, { kind: "pipe", type: i25.IgxGridRowStylesPipe, name: "igxGridRowStyles" }, { kind: "pipe", type: i26.IgxPivotRowPipe, name: "pivotGridRow" }, { kind: "pipe", type: i26.IgxPivotRowExpansionPipe, name: "pivotGridRowExpansion" }, { kind: "pipe", type: i26.IgxPivotAutoTransform, name: "pivotGridAutoTransform" }, { kind: "pipe", type: i26.IgxPivotColumnPipe, name: "pivotGridColumn" }, { kind: "pipe", type: i26.IgxPivotGridFilterPipe, name: "pivotGridFilter" }, { kind: "pipe", type: i26.IgxPivotGridSortingPipe, name: "pivotGridSort" }, { kind: "pipe", type: i26.IgxPivotGridColumnSortingPipe, name: "pivotGridColumnSort" }, { kind: "pipe", type: i26.IgxPivotCellMergingPipe, name: "pivotGridCellMerging" }], changeDetection: i0.ChangeDetectionStrategy.OnPush });
__decorate([
    WatchChanges()
], IgxPivotGridComponent.prototype, "hideRowSelectors", null);
__decorate([
    WatchChanges()
], IgxPivotGridComponent.prototype, "rowEditable", null);
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "14.0.0", ngImport: i0, type: IgxPivotGridComponent, decorators: [{
            type: Component,
            args: [{ changeDetection: ChangeDetectionStrategy.OnPush, preserveWhitespaces: false, selector: 'igx-pivot-grid', providers: [
                        IgxGridCRUDService,
                        IgxGridSummaryService,
                        IgxGridSelectionService,
                        GridBaseAPIService,
                        { provide: IGX_GRID_BASE, useExisting: IgxPivotGridComponent },
                        { provide: IgxFilteringService, useClass: IgxPivotFilteringService },
                        IgxPivotGridNavigationService,
                        IgxPivotColumnResizingService,
                        IgxForOfSyncService,
                        IgxForOfScrollSyncService
                    ], template: "<!-- Toolbar area -->\n<ng-content select=\"igx-grid-toolbar\"></ng-content>\n\n<!-- Grid table head row area -->\n<igx-pivot-header-row class=\"igx-grid-thead igx-grid-thead--pivot\" tabindex=\"0\"\n    [grid]=\"this\"\n    [hasMRL]=\"hasColumnLayouts\"\n    [density]=\"displayDensity\"\n    [activeDescendant]=\"activeDescendant\"\n    [width]=\"calcWidth\"\n    [pinnedColumnCollection]=\"pinnedColumns\"\n    [unpinnedColumnCollection]=\"unpinnedColumns\"\n    (keydown.meta.c)=\"copyHandler($event)\"\n    (keydown.control.c)=\"copyHandler($event)\"\n    (copy)=\"copyHandler($event)\"\n    (keydown)=\"navigation.headerNavigation($event)\"\n    (scroll)=\"preventHeaderScroll($event)\"\n>\n</igx-pivot-header-row>\n\n<div igxGridBody (keydown.control.c)=\"copyHandler($event)\" (copy)=\"copyHandler($event)\" class=\"igx-grid__tbody\" role=\"rowgroup\">\n    <ng-container *ngTemplateOutlet=\"rowDimensions.length ? defaultRowDimensionsTemplate : emptyRowDimensionsTemplate; context: this\"></ng-container>\n    <div class=\"igx-grid__tbody-content\" tabindex=\"0\" [attr.role]=\"dataView.length ? null : 'row'\" (keydown)=\"navigation.handleNavigation($event)\" (focus)=\"navigation.focusTbody($event)\"\n        (dragStop)=\"selectionService.dragMode = $event\" (scroll)='preventContainerScroll($event)'\n        (dragScroll)=\"dragScroll($event)\" [igxGridDragSelect]=\"selectionService.dragMode\"\n        [style.height.px]='totalHeight' [style.width.px]='calcWidth || null' #tbody [attr.aria-activedescendant]=\"activeDescendant\">\n        <span *ngIf=\"hasMovableColumns && columnInDrag && pinnedColumns.length <= 0\"\n            [igxColumnMovingDrop]=\"headerContainer\" [attr.droppable]=\"true\" id=\"left\"\n            class=\"igx-grid__scroll-on-drag-left\"></span>\n        <span *ngIf=\"hasMovableColumns && columnInDrag && pinnedColumns.length > 0\"\n            [igxColumnMovingDrop]=\"headerContainer\" [attr.droppable]=\"true\" id=\"left\"\n            class=\"igx-grid__scroll-on-drag-pinned\" [style.left.px]=\"pinnedWidth\"></span>\n        <ng-template igxGridFor let-rowData [igxGridForOf]=\"data\n        | pivotGridFilter:pivotConfiguration:filterStrategy:advancedFilteringExpressionsTree:filteringPipeTrigger:pipeTrigger\n        | pivotGridSort:pivotConfiguration:sortStrategy:pipeTrigger\n        | pivotGridRow:pivotConfiguration:expansionStates:pipeTrigger:sortingExpressions\n        | pivotGridColumn:pivotConfiguration:expansionStates:pipeTrigger:sortingExpressions\n        | pivotGridAutoTransform:pivotConfiguration:pipeTrigger\n        | pivotGridColumnSort:sortingExpressions:sortStrategy:pipeTrigger\n        | pivotGridRowExpansion:pivotConfiguration:expansionStates:defaultExpandState:pipeTrigger\"\n            let-rowIndex=\"index\" [igxForScrollOrientation]=\"'vertical'\" [igxForScrollContainer]='verticalScroll'\n            [igxForContainerSize]='calcHeight'\n            [igxForItemSize]=\"hasColumnLayouts ? rowHeight * multiRowLayoutRowSize + 1 : renderedRowHeight\"\n            [igxGridForOfVariableSizes]='false'\n            #verticalScrollContainer>\n            <ng-template\n                [igxTemplateOutlet]='recordTemplate'\n                [igxTemplateOutletContext]='getContext(rowData, rowIndex)'\n                (cachedViewLoaded)='cachedViewLoaded($event)'>\n            </ng-template>\n        </ng-template>\n        <ng-template #record_template let-rowIndex=\"index\" let-rowData>\n            <igx-pivot-row [style.height.px]=\"renderedRowHeight\" [gridID]=\"id\" [index]=\"rowIndex\" [data]=\"rowData\"\n                [ngClass]=\"rowClasses | igxGridRowClasses:row:row.inEditMode:row.selected:row.dirty:row.deleted:row.dragging:rowIndex:hasColumnLayouts:false:rowData:pipeTrigger\"\n                [ngStyle]=\"rowStyles | igxGridRowStyles:rowData:rowIndex:pipeTrigger\" #row>\n            </igx-pivot-row>\n        </ng-template>\n\n        <ng-container *ngTemplateOutlet=\"template\"></ng-container>\n        <igc-trial-watermark></igc-trial-watermark>\n    </div>\n    <div igxToggle #loadingOverlay>\n        <igx-circular-bar [indeterminate]=\"true\" *ngIf='shouldOverlayLoading'>\n        </igx-circular-bar>\n    </div>\n    <span *ngIf=\"hasMovableColumns && columnInDrag\" [igxColumnMovingDrop]=\"headerContainer\" [attr.droppable]=\"true\"\n        id=\"right\" class=\"igx-grid__scroll-on-drag-right\"></span>\n    <div [hidden]='!hasVerticalScroll()' class=\"igx-grid__tbody-scrollbar\" [style.width.px]=\"scrollSize\" (pointerdown)=\"$event.preventDefault()\">\n        <div class=\"igx-grid__tbody-scrollbar-start\" [style.height.px]=' isRowPinningToTop ? pinnedRowHeight : 0'></div>\n        <div class=\"igx-grid__tbody-scrollbar-main\" [style.height.px]='calcHeight'>\n            <ng-template igxGridFor [igxGridForOf]='[]' #verticalScrollHolder></ng-template>\n        </div>\n        <div class=\"igx-grid__tbody-scrollbar-end\" [style.height.px]='!isRowPinningToTop ? pinnedRowHeight : 0'></div>\n    </div>\n\n    <div class=\"igx-grid__addrow-snackbar\">\n        <igx-snackbar #addRowSnackbar [outlet]=\"igxBodyOverlayOutlet\" [actionText]=\"resourceStrings.igx_grid_snackbar_addrow_actiontext\" [displayTime]='snackbarDisplayTime'>{{resourceStrings.igx_grid_snackbar_addrow_label}}</igx-snackbar>\n    </div>\n\n    <div #igxBodyOverlayOutlet=\"overlay-outlet\" igxOverlayOutlet></div>\n</div>\n\n<div class=\"igx-grid__scroll\" [style.height.px]=\"scrollSize\" #scr [hidden]=\"isHorizontalScrollHidden\" (pointerdown)=\"$event.preventDefault()\">\n    <div class=\"igx-grid__scroll-start\" [style.width.px]='isPinningToStart ? pinnedWidth : headerFeaturesWidth' [style.min-width.px]='isPinningToStart ? pinnedWidth : headerFeaturesWidth'></div>\n    <div class=\"igx-grid__scroll-main\" [style.width.px]='unpinnedWidth'>\n        <ng-template igxGridFor [igxGridForOf]='EMPTY_DATA' #scrollContainer>\n        </ng-template>\n    </div>\n    <div class=\"igx-grid__scroll-end\" [style.float]='\"right\"' [style.width.px]='pinnedWidth' [style.min-width.px]='pinnedWidth' [hidden]=\"pinnedWidth === 0 || isPinningToStart\"></div>\n</div>\n\n<div class=\"igx-grid__tfoot\" role=\"rowgroup\" #tfoot>\n</div>\n\n<div class=\"igx-grid__footer\" #footer>\n    <ng-content select=\"igx-grid-footer\"></ng-content>\n</div>\n\n<ng-template #emptyFilteredGrid>\n    <span class=\"igx-grid__tbody-message\" role=\"cell\">\n        <span>{{emptyFilteredGridMessage}}</span>\n    </span>\n</ng-template>\n\n<ng-template #defaultEmptyGrid>\n    <span class=\"igx-grid__tbody-message\" role=\"cell\">\n        <span>{{emptyGridMessage}}</span>\n    </span>\n</ng-template>\n\n<ng-template #defaultLoadingGrid>\n    <div class=\"igx-grid__loading\">\n        <igx-circular-bar [indeterminate]=\"true\">\n        </igx-circular-bar>\n    </div>\n</ng-template>\n<igx-pivot-grid-column-resizer [restrictResizerTop]=\"theadRow.nativeElement.clientHeight\" *ngIf=\"colResizingService.showResizer\"></igx-pivot-grid-column-resizer>\n<div class=\"igx-grid__loading-outlet\" #igxLoadingOverlayOutlet igxOverlayOutlet></div>\n<div class=\"igx-grid__outlet\" #igxFilteringOverlayOutlet igxOverlayOutlet></div>\n\n<ng-template #headerTemplate let-column>\n    <div class=\"igx-grid__tr--header\">\n        <igx-icon [attr.draggable]=\"false\"\n                  (click)=\"toggleColumn(column)\">\n                  {{getColumnGroupExpandState(column) ? 'chevron_right' : 'expand_more'}}</igx-icon>\n        {{column.header}}\n    </div>\n</ng-template>\n\n<ng-template #defaultRowDimensionsTemplate>\n    <div tabindex=\"0\" [style.height.px]='totalHeight' *ngFor='let dim of rowDimensions; let dimIndex = index;' #rowDimensionContainer role=\"rowgroup\" class='igx-grid__tbody-pivot-dimension' (focus)=\"navigation.focusTbody($event)\" (keydown)=\"navigation.handleNavigation($event)\">\n        <ng-template igxGridFor let-rowData [igxGridForOf]=\"dataView\n        | pivotGridCellMerging:pivotConfiguration:dim:pipeTrigger\"\n                     let-rowIndex=\"index\" [igxForScrollOrientation]=\"'vertical'\" [igxForScrollContainer]='verticalScroll'\n                     [igxForContainerSize]='calcHeight'\n                     [igxForItemSize]=\"renderedRowHeight\"\n                     [igxForSizePropName]='\"height\"'\n                     #verticalRowDimScrollContainer>\n            <igx-pivot-row-dimension-content role='row' class=\"igx-grid-thead\" [grid]=\"this\"\n                                             [dimension]='rowData.dimensions[dimIndex]'\n                                             [rootDimension]='dim'\n                                             [style.height.px]=\"renderedRowHeight * (rowData.rowSpan || 1)\"\n                                             [rowIndex]='rowIndex' [rowData]='rowData'\n                                             [density]=\"displayDensity\" [width]=\"rowDimensionWidthToPixels(dim)\">\n            </igx-pivot-row-dimension-content>\n        </ng-template>\n    </div>\n</ng-template>\n<ng-template #emptyRowDimensionsTemplate>\n    <div tabindex=\"0\" *ngIf='columnDimensions.length > 0 || values.length > 0' #rowDimensionContainer role=\"rowgroup\" class='igx-grid__tbody-pivot-dimension' (focus)=\"navigation.focusTbody($event)\" (keydown)=\"navigation.handleNavigation($event)\">\n        <igx-pivot-row-dimension-content role='row' class=\"igx-grid-thead\" [grid]=\"this\"\n            [dimension]='emptyRowDimension'\n            [rootDimension]='emptyRowDimension'\n            [rowIndex]='0' [rowData]='dataView[0]'\n            [density]=\"displayDensity\" [width]=\"rowDimensionWidthToPixels(emptyRowDimension)\">\n        </igx-pivot-row-dimension-content>\n    </div>\n</ng-template>\n\n<ng-template #emptyPivotGridTemplate>\n    <span class=\"igx-grid__tbody-message\" role=\"cell\">\n        <span>{{resourceStrings.igx_grid_pivot_empty_message}}</span>\n    </span>\n</ng-template>\n\n<div [hidden]='true'>\n    <igx-grid-excel-style-filtering [maxHeight]='excelStyleFilterMaxHeight' [minHeight]='excelStyleFilterMinHeight'>\n        <div igxExcelStyleColumnOperations [hidden]='true'></div>\n        <igx-excel-style-filter-operations>\n            <igx-excel-style-search></igx-excel-style-search>\n        </igx-excel-style-filter-operations>\n    </igx-grid-excel-style-filtering>\n</div>\n" }]
        }], ctorParameters: function () { return [{ type: i1.IgxGridSelectionService }, { type: i2.IgxPivotColumnResizingService }, { type: i3.GridBaseAPIService }, { type: i4.IgxFlatTransactionFactory }, { type: i0.ElementRef }, { type: i0.NgZone }, { type: undefined, decorators: [{
                    type: Inject,
                    args: [DOCUMENT]
                }] }, { type: i0.ChangeDetectorRef }, { type: i0.ComponentFactoryResolver }, { type: i0.IterableDiffers }, { type: i0.ViewContainerRef }, { type: i0.ApplicationRef }, { type: i0.NgModuleRef }, { type: i0.Injector }, { type: i5.IgxPivotGridNavigationService }, { type: i6.IgxFilteringService }, { type: i4.IgxOverlayService, decorators: [{
                    type: Inject,
                    args: [IgxOverlayService]
                }] }, { type: i7.IgxGridSummaryService }, { type: undefined, decorators: [{
                    type: Optional
                }, {
                    type: Inject,
                    args: [DisplayDensityToken]
                }] }, { type: undefined, decorators: [{
                    type: Inject,
                    args: [LOCALE_ID]
                }] }, { type: i8.PlatformUtil }, { type: undefined, decorators: [{
                    type: Optional
                }, {
                    type: Inject,
                    args: [IgxGridTransaction]
                }] }]; }, propDecorators: { dimensionsChange: [{
                type: Output
            }], dimensionsSortingExpressionsChange: [{
                type: Output
            }], valuesChange: [{
                type: Output
            }], theadRow: [{
                type: ViewChild,
                args: [IgxPivotHeaderRowComponent, { static: true }]
            }], pivotConfiguration: [{
                type: Input
            }], showPivotConfigurationUI: [{
                type: Input
            }], role: [{
                type: HostBinding,
                args: ['attr.role']
            }], superCompactMode: [{
                type: HostBinding,
                args: ['class.igx-grid__pivot--super-compact']
            }, {
                type: Input
            }], displayDensity: [{
                type: Input
            }], recordTemplate: [{
                type: ViewChild,
                args: ['record_template', { read: TemplateRef, static: true }]
            }], headerTemplate: [{
                type: ViewChild,
                args: ['headerTemplate', { read: TemplateRef, static: true }]
            }], resizeLine: [{
                type: ViewChild,
                args: [IgxPivotGridColumnResizerComponent]
            }], excelStyleFilteringComponents: [{
                type: ViewChildren,
                args: [IgxGridExcelStyleFilteringComponent, { read: IgxGridExcelStyleFilteringComponent }]
            }], rowDimensionContentCollection: [{
                type: ViewChildren,
                args: [IgxPivotRowDimensionContentComponent]
            }], verticalRowDimScrollContainers: [{
                type: ViewChildren,
                args: ['verticalRowDimScrollContainer', { read: IgxGridForOfDirective }]
            }], addRowEmptyTemplate: [{
                type: Input
            }], snackbarDisplayTime: [{
                type: Input
            }], cellEdit: [{
                type: Output
            }], cellEditDone: [{
                type: Output
            }], cellEditEnter: [{
                type: Output
            }], cellEditExit: [{
                type: Output
            }], columnMovingStart: [{
                type: Output
            }], columnMoving: [{
                type: Output
            }], columnMovingEnd: [{
                type: Output
            }], columnPin: [{
                type: Output
            }], columnPinned: [{
                type: Output
            }], rowAdd: [{
                type: Output
            }], rowAdded: [{
                type: Output
            }], rowDeleted: [{
                type: Output
            }], rowDelete: [{
                type: Output
            }], rowDragStart: [{
                type: Output
            }], rowDragEnd: [{
                type: Output
            }], rowEditEnter: [{
                type: Output
            }], rowEdit: [{
                type: Output
            }], rowEditDone: [{
                type: Output
            }], rowEditExit: [{
                type: Output
            }], rowPinning: [{
                type: Output
            }], rowPinned: [{
                type: Output
            }], defaultExpandState: [{
                type: Input
            }], pagingMode: [{
                type: Input
            }], hideRowSelectors: [{
                type: Input
            }], rowDraggable: [{
                type: Input
            }], allowAdvancedFiltering: [{
                type: Input
            }], filterMode: [{
                type: Input
            }], allowFiltering: [{
                type: Input
            }], page: [{
                type: Input
            }], paging: [{
                type: Input
            }], perPage: [{
                type: Input
            }], summaryRowHeight: [{
                type: Input
            }], rowEditable: [{
                type: Input
            }], pinning: [{
                type: Input
            }], summaryPosition: [{
                type: Input
            }], summaryCalculationMode: [{
                type: Input
            }], showSummaryOnCollapse: [{
                type: Input
            }], batchEditing: [{
                type: Input
            }], id: [{
                type: HostBinding,
                args: ['attr.id']
            }, {
                type: Input
            }], data: [{
                type: Input
            }], totalRecords: [{
                type: Input
            }], defaultEmptyPivotGridTemplate: [{
                type: ViewChild,
                args: ['emptyPivotGridTemplate', { read: TemplateRef, static: true }]
            }], emptyPivotGridTemplate: [{
                type: Input
            }] } });
//# sourceMappingURL=data:application/json;base64,