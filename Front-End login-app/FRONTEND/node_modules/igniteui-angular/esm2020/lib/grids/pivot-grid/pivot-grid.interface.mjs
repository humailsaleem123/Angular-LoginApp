/**
* Default pivot keys used for data processing in the pivot pipes.
*/
export const DEFAULT_PIVOT_KEYS = {
    aggregations: 'aggregations', records: 'records', children: 'children', level: 'level',
    rowDimensionSeparator: '_', columnDimensionSeparator: '-'
};
/** The dimension types - Row, Column or Filter. */
export var PivotDimensionType;
(function (PivotDimensionType) {
    PivotDimensionType[PivotDimensionType["Row"] = 0] = "Row";
    PivotDimensionType[PivotDimensionType["Column"] = 1] = "Column";
    PivotDimensionType[PivotDimensionType["Filter"] = 2] = "Filter";
})(PivotDimensionType || (PivotDimensionType = {}));
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoicGl2b3QtZ3JpZC5pbnRlcmZhY2UuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi8uLi8uLi8uLi8uLi9wcm9qZWN0cy9pZ25pdGV1aS1hbmd1bGFyL3NyYy9saWIvZ3JpZHMvcGl2b3QtZ3JpZC9waXZvdC1ncmlkLmludGVyZmFjZS50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFNQTs7RUFFRTtBQUNGLE1BQU0sQ0FBQyxNQUFNLGtCQUFrQixHQUFHO0lBQzlCLFlBQVksRUFBRSxjQUFjLEVBQUUsT0FBTyxFQUFFLFNBQVMsRUFBRSxRQUFRLEVBQUUsVUFBVSxFQUFFLEtBQUssRUFBRSxPQUFPO0lBQ3RGLHFCQUFxQixFQUFFLEdBQUcsRUFBRSx3QkFBd0IsRUFBRSxHQUFHO0NBQzVELENBQUM7QUErSkYsbURBQW1EO0FBQ25ELE1BQU0sQ0FBTixJQUFZLGtCQUlYO0FBSkQsV0FBWSxrQkFBa0I7SUFDMUIseURBQUcsQ0FBQTtJQUNILCtEQUFNLENBQUE7SUFDTiwrREFBTSxDQUFBO0FBQ1YsQ0FBQyxFQUpXLGtCQUFrQixLQUFsQixrQkFBa0IsUUFJN0IiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBHcmlkQ29sdW1uRGF0YVR5cGUgfSBmcm9tICcuLi8uLi9kYXRhLW9wZXJhdGlvbnMvZGF0YS11dGlsJztcbmltcG9ydCB7IElGaWx0ZXJpbmdFeHByZXNzaW9uc1RyZWUgfSBmcm9tICcuLi8uLi9kYXRhLW9wZXJhdGlvbnMvZmlsdGVyaW5nLWV4cHJlc3Npb25zLXRyZWUnO1xuaW1wb3J0IHsgU29ydGluZ0RpcmVjdGlvbiB9IGZyb20gJy4uLy4uL2RhdGEtb3BlcmF0aW9ucy9zb3J0aW5nLXN0cmF0ZWd5JztcbmltcG9ydCB7IENvbHVtblR5cGUgfSBmcm9tICcuLi9jb21tb24vZ3JpZC5pbnRlcmZhY2UnO1xuXG5cbi8qKlxuKiBEZWZhdWx0IHBpdm90IGtleXMgdXNlZCBmb3IgZGF0YSBwcm9jZXNzaW5nIGluIHRoZSBwaXZvdCBwaXBlcy5cbiovXG5leHBvcnQgY29uc3QgREVGQVVMVF9QSVZPVF9LRVlTID0ge1xuICAgIGFnZ3JlZ2F0aW9uczogJ2FnZ3JlZ2F0aW9ucycsIHJlY29yZHM6ICdyZWNvcmRzJywgY2hpbGRyZW46ICdjaGlsZHJlbicsIGxldmVsOiAnbGV2ZWwnLFxuICAgIHJvd0RpbWVuc2lvblNlcGFyYXRvcjogJ18nLCBjb2x1bW5EaW1lbnNpb25TZXBhcmF0b3I6ICctJ1xufTtcblxuXG4vKipcbiAqIEV2ZW50IGVtaXR0ZWQgd2hlbiBkaW1lbnNpb24gY29sbGVjdGlvbiBmb3Igcm93cywgY29sdW1ucyBvZiBmaWx0ZXJzIGlzIGNoYW5nZWQuXG4gKi9cbmV4cG9ydCBpbnRlcmZhY2UgSURpbWVuc2lvbnNDaGFuZ2Uge1xuICAgIC8qKiBUaGUgbmV3IGxpc3Qgb2YgZGltZW5zaW9ucy4gKi9cbiAgICBkaW1lbnNpb25zOiBJUGl2b3REaW1lbnNpb25bXSxcbiAgICAvKiogVGhlIGRpbWVuc2lvbiBsaXN0IHR5cGUgLSBSb3csIENvbHVtbiBvciBGaWx0ZXIuICovXG4gICAgZGltZW5zaW9uQ29sbGVjdGlvblR5cGU6IFBpdm90RGltZW5zaW9uVHlwZVxufVxuXG4vKipcbiogRXZlbnQgZW1pdHRlZCB3aGVuIHZhbHVlcyBsaXN0IGlzIGNoYW5nZWQuXG4qL1xuZXhwb3J0IGludGVyZmFjZSBJVmFsdWVzQ2hhbmdlIHtcbiAgICAvKiogVGhlIG5ldyBsaXN0IG9mIHZhbHVlcy4gKi9cbiAgICB2YWx1ZXM6IElQaXZvdFZhbHVlW11cbn1cblxuLyoqXG4qIEludGVyZmFjZSBkZXNjcmliaW5nIFBpdm90IGRhdGEgcHJvY2Vzc2luZyBmb3IgZGltZW5zaW9ucy5cbiogU2hvdWxkIGNvbnRhaW4gYSBwcm9jZXNzIG1ldGhvZCBhbmQgcmV0dXJuIHJlY29yZHMgaGllcmFyY2h5IGJhc2VkIG9uIHRoZSBwcm92aWRlZCBkaW1lbnNpb25zLlxuKi9cbmV4cG9ydCBpbnRlcmZhY2UgSVBpdm90RGltZW5zaW9uU3RyYXRlZ3kge1xuICAgIHByb2Nlc3MoY29sbGVjdGlvbjogYW55LFxuICAgICAgICBkaW1lbnNpb25zOiBJUGl2b3REaW1lbnNpb25bXSxcbiAgICAgICAgdmFsdWVzOiBJUGl2b3RWYWx1ZVtdLFxuICAgICAgICBwaXZvdEtleXM/OiBJUGl2b3RLZXlzKTogYW55W107XG59XG5cbi8qKlxuKiBJbnRlcmZhY2UgZGVzY3JpYmluZyBhIFBpdm90QWdncmVnYXRpb24gZnVuY3Rpb24uIFxuKiBBY2NlcHRzIGFuIGFycmF5IG9mIGV4dHJhY3RlZCBkYXRhIG1lbWJlcnMgYW5kIGEgYXJyYXkgb2YgdGhlIG9yaWdpbmFsIGRhdGEgcmVjb3Jkcy5cbiovXG5leHBvcnQgdHlwZSBQaXZvdEFnZ3JlZ2F0aW9uID0gKG1lbWJlcnM6IGFueVtdLCBkYXRhOiBhbnlbXSkgPT4gYW55O1xuXG4vKipcbiogSW50ZXJmYWNlIGRlc2NyaWJpbmcgYSBJUGl2b3RBZ2dyZWdhdG9yIGNsYXNzLlxuKiBVc2VkIGZvciBzcGVjaWZ5aW5nIGN1c3RvbSBhZ2dyZWdhdG9yIGxpc3RzLlxuKi9cbmV4cG9ydCBpbnRlcmZhY2UgSVBpdm90QWdncmVnYXRvciB7XG4gICAgLyoqIEFnZ3JlZ2F0aW9uIHVuaXF1ZSBrZXkuICovXG4gICAga2V5OiBzdHJpbmc7XG4gICAgLyoqIEFnZ3JlZ2F0aW9uIGxhYmVsIHRvIHNob3cgaW4gdGhlIFVJLiAqL1xuICAgIGxhYmVsOiBzdHJpbmc7XG4gICAgLyoqXG4gICAgICogQWdncmVnYXRvciBmdW5jdGlvbiBjYW4gYmUgYSBjdXN0b20gaW1wbGVtZW50YXRpb24gb2YgYFBpdm90QWdncmVnYXRpb25gLCBvciBcbiAgICAgKiB1c2UgcHJlZGVmaW5lZCBvbmVzIGZyb20gYElneFBpdm90QWdncmVnYXRlYCBhbmQgaXRzIHZhcmlhbnRzLlxuICAgICAqL1xuICAgIGFnZ3JlZ2F0b3I6IChtZW1iZXJzOiBhbnlbXSwgZGF0YT86IGFueVtdKSA9PiBhbnk7XG59XG5cbi8qKlxuKiBDb25maWd1cmF0aW9uIG9mIHRoZSBwaXZvdCBncmlkLlxuKi9cbmV4cG9ydCBpbnRlcmZhY2UgSVBpdm90Q29uZmlndXJhdGlvbiB7XG4gICAgLyoqIEEgc3RyYXRlZ3kgdG8gdHJhbnNmb3JtIHRoZSByb3dzLiAqL1xuICAgIHJvd1N0cmF0ZWd5PzogSVBpdm90RGltZW5zaW9uU3RyYXRlZ3kgfCBudWxsO1xuICAgIC8qKiBBIHN0cmF0ZWd5IHRvIHRyYW5zZm9ybSB0aGUgY29sdW1ucy4gKi9cbiAgICBjb2x1bW5TdHJhdGVneT86IElQaXZvdERpbWVuc2lvblN0cmF0ZWd5IHwgbnVsbDtcbiAgICAvKiogQSBsaXN0IG9mIHRoZSByb3dzLiAqL1xuICAgIHJvd3M6IElQaXZvdERpbWVuc2lvbltdIHwgbnVsbDtcbiAgICAvKiogQSBsaXN0IG9mIHRoZSBjb2x1bW5zLiAqL1xuICAgIGNvbHVtbnM6IElQaXZvdERpbWVuc2lvbltdIHwgbnVsbDtcbiAgICAvKiogQSBsaXN0IG9mIHRoZSB2YWx1ZXMuICovXG4gICAgdmFsdWVzOiBJUGl2b3RWYWx1ZVtdIHwgbnVsbDtcbiAgICAvKiogRGltZW5zaW9ucyB0byBiZSBkaXNwbGF5ZWQgaW4gdGhlIGZpbHRlciBhcmVhLiAqL1xuICAgIGZpbHRlcnM/OiBJUGl2b3REaW1lbnNpb25bXSB8IG51bGw7XG4gICAgLyoqIFBpdm90IGRhdGEga2V5cyB1c2VkIGZvciBkYXRhIGdlbmVyYXRpb24uIENhbiBiZSB1c2VkIGZvciBjdXN0b20gcmVtb3RlIHNjZW5hcmlvcyB3aGVyZSB0aGUgZGF0YSBpcyBwcmUtcG9wdWxhdGVkLiAqL1xuICAgIHBpdm90S2V5cz86IElQaXZvdEtleXM7XG59XG5cbi8qKlxuKiBDb25maWd1cmF0aW9uIG9mIGEgcGl2b3QgZGltZW5zaW9uLlxuKi9cbmV4cG9ydCBpbnRlcmZhY2UgSVBpdm90RGltZW5zaW9uIHtcbiAgICAvKiogQWxsb3dzIGRlZmluaW5nIGEgaGllcmFyY2h5IHdoZW4gbXVsdGlwbGUgc3ViIGdyb3VwcyBuZWVkIHRvIGJlIGV4dHJhY3RlZCBmcm9tIHNpbmdsZSBtZW1iZXIuICovXG4gICAgY2hpbGRMZXZlbD86IElQaXZvdERpbWVuc2lvbjtcbiAgICAvKiogRmllbGQgbmFtZSB0byB1c2UgaW4gb3JkZXIgdG8gZXh0cmFjdCB2YWx1ZS4gKi9cbiAgICBtZW1iZXJOYW1lOiBzdHJpbmc7XG4gICAgLyoqIEZ1bmN0aW9uIHRoYXQgZXh0cmFjdHMgdGhlIHZhbHVlICovXG4gICAgbWVtYmVyRnVuY3Rpb24/OiAoZGF0YTogYW55KSA9PiBhbnk7XG4gICAgLyoqIEVuYWJsZXMvRGlzYWJsZXMgYSBwYXJ0aWN1bGFyIGRpbWVuc2lvbiBmcm9tIHBpdm90IHN0cnVjdHVyZS4gKi9cbiAgICBlbmFibGVkOiBib29sZWFuO1xuICAgIC8qKlxuICAgICAqIEEgcHJlZGVmaW5lZCBvciBkZWZpbmVkIHZpYSB0aGUgYGlneFBpdm90U2VsZWN0b3JgIGZpbHRlciBleHByZXNzaW9uIHRyZWUgZm9yIHRoZSBjdXJyZW50IGRpbWVuc2lvbiB0byBiZSBhcHBsaWVkIGluIHRoZSBmaWx0ZXIgcGlwZS5cbiAgICAgKiAqL1xuICAgIGZpbHRlcj86IElGaWx0ZXJpbmdFeHByZXNzaW9uc1RyZWUgfCBudWxsO1xuICAgIC8qKlxuICAgICAqIFRoZSBzb3J0aW5nIGRpcmVjdGlvbiBvZiB0aGUgY3VycmVudCBkaW1lbnNpb24uIERldGVybWluZXMgdGhlIG9yZGVyIGluIHdoaWNoIHRoZSB2YWx1ZXMgd2lsbCBhcHBlYXIgaW4gdGhlIHJlbGF0ZWQgZGltZW5zaW9uLlxuICAgICAqL1xuICAgIHNvcnREaXJlY3Rpb24/OiBTb3J0aW5nRGlyZWN0aW9uO1xuICAgIC8qKlxuICAgICAqIFRoZSBkYXRhVHlwZSBvZiB0aGUgcmVsYXRlZCBkYXRhIGZpZWxkLlxuICAgICAqL1xuICAgIGRhdGFUeXBlPzogR3JpZENvbHVtbkRhdGFUeXBlO1xuICAgIC8qKiBUaGUgd2lkdGggb2YgdGhlIGRpbWVuc2lvbiBjZWxscyB0byBiZSByZW5kZXJlZC5DYW4gYmUgcGl4ZWwgb3IgJS4gKi9cbiAgICB3aWR0aD86IHN0cmluZztcbiAgICAvKiogTGV2ZWwgb2YgdGhlIGRpbWVuc2lvbi4gKi9cbiAgICBsZXZlbD86IG51bWJlcjtcbn1cbi8qKlxuKiBDb25maWd1cmF0aW9uIG9mIGEgcGl2b3QgdmFsdWUgYWdncmVnYXRpb24uXG4qL1xuZXhwb3J0IGludGVyZmFjZSBJUGl2b3RWYWx1ZSB7XG4gICAgLyoqIEZpZWxkIG5hbWUgdG8gdXNlIGluIG9yZGVyIHRvIGV4dHJhY3QgdmFsdWUuICovXG4gICAgbWVtYmVyOiBzdHJpbmc7XG4gICAgLyoqIERpc3BsYXkgbmFtZSB0byBzaG93IGluc3RlYWQgb2YgbWVtYmVyIGZvciB0aGUgY29sdW1uIGhlYWRlciBvZiB0aGlzIHZhbHVlLiAqKi9cbiAgICBkaXNwbGF5TmFtZT86IHN0cmluZztcbiAgICAvKipcbiAgICAgKiBBY3RpdmUgYWdncmVnYXRvciBkZWZpbml0aW9uIHdpdGgga2V5LCBsYWJlbCBhbmQgYWdncmVnYXRvci5cbiAgICAgKi9cbiAgICBhZ2dyZWdhdGU6IElQaXZvdEFnZ3JlZ2F0b3I7XG4gICAgLyoqXG4gICAgICogTGlzdCBvZiBhZ2dyZWdhdGVzIHRvIHNob3cgaW4gYWdncmVnYXRlIGRyb3AtZG93bi5cbiAgICAgKi9cbiAgICBhZ2dyZWdhdGVMaXN0PzogSVBpdm90QWdncmVnYXRvcltdO1xuICAgIC8qKiBFbmFibGVzL0Rpc2FibGVzIGEgcGFydGljdWxhciB2YWx1ZSBmcm9tIHBpdm90IGFnZ3JlZ2F0aW9uLiAqL1xuICAgIGVuYWJsZWQ6IGJvb2xlYW47XG4gICAgLyoqICBBbGxvdyBjb25kaXRpb25hbGx5IHN0eWxpbmcgb2YgdGhlIElneFBpdm90R3JpZCBjZWxscy4gKi9cbiAgICBzdHlsZXM/OiBhbnk7XG4gICAgLyoqIEVuYWJsZXMgYSBkYXRhIHR5cGUgc3BlY2lmaWMgdGVtcGxhdGUgb2YgdGhlIGNlbGxzICovXG4gICAgZGF0YVR5cGU/OiBHcmlkQ29sdW1uRGF0YVR5cGU7XG4gICAgLyoqIEFwcGxpZXMgZGlzcGxheSBmb3JtYXQgdG8gY2VsbCB2YWx1ZXMuICovXG4gICAgZm9ybWF0dGVyPzogKHZhbHVlOiBhbnksIHJvd0RhdGE/OiBJUGl2b3RHcmlkUmVjb3JkLCBjb2x1bW5EYXRhPzogSVBpdm90R3JpZENvbHVtbikgPT4gYW55O1xufVxuXG4vKiogSW50ZXJmYWNlIGRlc2NyaWJpbmcgdGhlIFBpdm90IGNvbHVtbiBkYXRhLlxuKiAgQ29udGFpbnMgaW5mb3JtYXRpb24gb24gdGhlIHJlbGF0ZWQgY29sdW1uIGRpbWVuc2lvbnMgYW5kIHRoZWlyIHZhbHVlcy5cbiovXG5leHBvcnQgaW50ZXJmYWNlIElQaXZvdEdyaWRDb2x1bW4ge1xuICAgICAgICBmaWVsZDogc3RyaW5nLFxuICAgICAgICAvKiogR2V0cy9TZXRzIHRoZSBncm91cCB2YWx1ZSBhc3NvY2lhdGVkIHdpdGggdGhlIHJlbGF0ZWQgY29sdW1uIGRpbWVuc2lvbiBieSBpdHMgbWVtYmVyTmFtZS4gKiovXG4gICAgICAgIGRpbWVuc2lvblZhbHVlczogTWFwPHN0cmluZywgc3RyaW5nPjtcbiAgICAgICAgLyoqIExpc3Qgb2YgZGltZW5zaW9ucyBhc3NvY2lhdGVkIHdpdGggdGhlIGNvbHVtbi4qKi9cbiAgICAgICAgZGltZW5zaW9uczogSVBpdm90RGltZW5zaW9uW107XG4gICAgICAgIHZhbHVlOiBJUGl2b3RWYWx1ZVxufVxuXG4vKiogSW50ZXJmYWNlIGRlc2NyaWJpbmcgdGhlIFBpdm90IGRhdGEga2V5cyB1c2VkIGZvciBkYXRhIGdlbmVyYXRpb24uXG4qICBDYW4gYmUgdXNlZCBmb3IgY3VzdG9tIHJlbW90ZSBzY2VuYXJpb3Mgd2hlcmUgdGhlIGRhdGEgaXMgcHJlLXBvcHVsYXRlZC5cbiovXG5leHBvcnQgaW50ZXJmYWNlIElQaXZvdEtleXMge1xuICAgIC8qKiBGaWVsZCB0aGF0IHN0b3JlcyBjaGlsZHJlbiBmb3IgaGllcmFyY2h5IGJ1aWxkaW5nLiAqL1xuICAgIGNoaWxkcmVuOiBzdHJpbmc7XG4gICAgLyoqIEZpZWxkIHRoYXQgc3RvcmVzIHJlZmVyZW5jZSB0byB0aGUgb3JpZ2luYWwgZGF0YSByZWNvcmRzLiAqL1xuICAgIHJlY29yZHM6IHN0cmluZztcbiAgICAvKiogRmllbGQgdGhhdCBzdG9yZXMgYWdncmVnYXRpb24gdmFsdWVzLiAqL1xuICAgIGFnZ3JlZ2F0aW9uczogc3RyaW5nO1xuICAgIC8qKiBGaWVsZCB0aGF0IHN0b3JlcyBkaW1lbnNpb24gbGV2ZWwgYmFzZWQgb24gaXRzIGhpZXJhcmNoeS4gKi9cbiAgICBsZXZlbDogc3RyaW5nO1xuICAgIC8qKiBTZXBhcmF0b3IgdXNlZCB3aGVuIGdlbmVyYXRpbmcgdGhlIHVuaXF1ZSBjb2x1bW4gZmllbGQgdmFsdWVzLiAqL1xuICAgIGNvbHVtbkRpbWVuc2lvblNlcGFyYXRvcjogc3RyaW5nO1xuICAgIC8qKiBTZXBhcmF0b3IgdXNlZCB3aGVuIGdlbmVyYXRpbmcgdGhlIHVuaXF1ZSByb3cgZmllbGQgdmFsdWVzLiAqL1xuICAgIHJvd0RpbWVuc2lvblNlcGFyYXRvcjogc3RyaW5nO1xufVxuXG4vKiogVGhlIGRpbWVuc2lvbiB0eXBlcyAtIFJvdywgQ29sdW1uIG9yIEZpbHRlci4gKi9cbmV4cG9ydCBlbnVtIFBpdm90RGltZW5zaW9uVHlwZSB7XG4gICAgUm93LFxuICAgIENvbHVtbixcbiAgICBGaWx0ZXJcbn1cblxuLyoqIEludGVyZmFjZSBkZXNjcmliaW5nIHRoZSBwaXZvdCBkaW1lbnNpb24gZGF0YS5cbiogQ29udGFpbnMgYWRkaXRpb25hbCBpbmZvcm1hdGlvbiBuZWVkZWQgdG8gcmVuZGVyIGRpbWVuc2lvbiBoZWFkZXJzLlxuKi9cbmV4cG9ydCBpbnRlcmZhY2UgSVBpdm90RGltZW5zaW9uRGF0YSB7XG4gICAgLyoqIEFzc29jaWF0ZWQgY29sdW1uIGRlZmluaXRpb24uICovXG4gICAgY29sdW1uOiBDb2x1bW5UeXBlO1xuICAgIC8qKiBBc3NvY2lhdGVkIGRpbWVuc2lvbiBkZWZpbml0aW9uLiAqL1xuICAgIGRpbWVuc2lvbjogSVBpdm90RGltZW5zaW9uO1xuICAgIC8qKiBMaXN0IG9mIHByZXZpb3VzIGRpbWVuc2lvbiBncm91cHMuICovXG4gICAgcHJldkRpbWVuc2lvbnM6IElQaXZvdERpbWVuc2lvbltdO1xuICAgIC8qKiBXaGV0aGVyIHRoaXMgYSBjaGlsZCBkaW1lbnNpb24uICovXG4gICAgaXNDaGlsZD86IGJvb2xlYW47XG59XG5cbmV4cG9ydCBpbnRlcmZhY2UgUGl2b3RSb3dIZWFkZXJHcm91cFR5cGUge1xuICAgIHJvd0luZGV4OiBudW1iZXI7XG4gICAgcGFyZW50OiBhbnk7XG4gICAgaGVhZGVyOiBhbnk7XG4gICAgaGVhZGVySUQ6IHN0cmluZztcbiAgICBncmlkOiBhbnk7XG59XG5cbmV4cG9ydCBpbnRlcmZhY2UgSVBpdm90R3JpZFJlY29yZCB7XG4gICAgLyoqIEdldHMvU2V0cyB0aGUgZ3JvdXAgdmFsdWUgYXNzb2NpYXRlZCB3aXRoIHRoZSByZWxhdGVkIHJvdyBkaW1lbnNpb24gYnkgaXRzIG1lbWJlck5hbWUuICoqL1xuICAgIGRpbWVuc2lvblZhbHVlczogTWFwPHN0cmluZywgc3RyaW5nPjtcbiAgICAvKiogR2V0cy9TZXRzIHRoZSBhZ2dyZWdhdGlvbiB2YWx1ZSBhc3NvY2lhdGVkIHdpdGggdGhlIHZhbHVlIHBhdGguIFZhbHVlIHBhdGggZGVwZW5kcyBvbiBjb25maWd1cmVkIGNvbHVtbiBkaW1lbnNpb24gaGllcmFyY2h5IGFuZCB2YWx1ZXMuKiovXG4gICAgYWdncmVnYXRpb25WYWx1ZXM6IE1hcDxzdHJpbmcsIGFueT47XG4gICAgLyoqIExpc3Qgb2YgY2hpbGRyZW4gcmVjb3JkcyBpbiBjYXNlIGFueSByb3cgZGltZW5zaW9uIG1lbWJlciBjb250YWluIGEgaGllcmFyY2h5LiBFYWNoIGRpbWVuc2lvbiBtZW1iZXIgY29udGFpbnMgaXRzIG93biBoaWVyYXJjaHksIHdoaWNoIHlvdSBjYW4gZ2V0IGJ5IGl0cyBtZW1iZXJOYW1lLiAqKi9cbiAgICBjaGlsZHJlbj86IE1hcDxzdHJpbmcsIElQaXZvdEdyaWRSZWNvcmRbXT47XG4gICAgLyoqIExpc3Qgb2Ygb3JpZ2luYWwgZGF0YSByZWNvcmRzIGFzc29jaWF0ZWQgd2l0aCB0aGUgY3VycmVudCBwaXZvdGVkIGRhdGEuICoqL1xuICAgIHJlY29yZHM/OiBhbnlbXTtcbiAgICAgLyoqIFJlY29yZCBsZXZlbCoqL1xuICAgIGxldmVsPzogbnVtYmVyO1xuICAgIC8qKiBMaXN0IG9mIGRpbWVuc2lvbnMgYXNzb2NpYXRlZCB3aXRoIHRoZSByZWNvcmQuKiovXG4gICAgZGltZW5zaW9uczogSVBpdm90RGltZW5zaW9uW107XG59XG5cbmV4cG9ydCBpbnRlcmZhY2UgSVBpdm90R3JpZEdyb3VwUmVjb3JkIGV4dGVuZHMgSVBpdm90R3JpZFJlY29yZCB7XG4gICAgaGVpZ2h0PzogbnVtYmVyO1xuICAgIHJvd1NwYW4/OiBudW1iZXI7XG59XG4iXX0=