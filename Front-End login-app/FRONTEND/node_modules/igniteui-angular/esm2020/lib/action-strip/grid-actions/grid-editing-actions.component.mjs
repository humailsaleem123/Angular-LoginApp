import { Component, HostBinding, Input } from '@angular/core';
import { IgxGridActionsBaseDirective } from './grid-actions-base.directive';
import { showMessage } from '../../core/utils';
import { addRow, addChild } from '@igniteui/material-icons-extended';
import * as i0 from "@angular/core";
import * as i1 from "@angular/common";
import * as i2 from "./grid-action-button.component";
export class IgxGridEditingActionsComponent extends IgxGridActionsBaseDirective {
    constructor() {
        super(...arguments);
        /**
         * Host `class.igx-action-strip` binding.
         *
         * @hidden
         * @internal
         */
        this.cssClass = 'igx-action-strip__editing-actions';
        /**
         * An input to enable/disable action strip row editing button
         */
        this.editRow = true;
        /**
        * An input to enable/disable action strip row deleting button
        */
        this.deleteRow = true;
        /**
         * An input to enable/disable action strip child row adding button
         */
        this.addChild = false;
        this.isMessageShown = false;
        this._addRow = false;
        this.iconsRendered = false;
    }
    /**
     * An input to enable/disable action strip row adding button
     */
    set addRow(value) {
        this._addRow = value;
    }
    get addRow() {
        if (!this.iconsRendered) {
            this.registerIcons();
            this.iconsRendered = true;
        }
        return this._addRow;
    }
    /**
     * Getter if the row is disabled
     *
     * @hidden
     * @internal
     */
    get disabled() {
        if (!this.isRow(this.strip.context)) {
            return;
        }
        return this.strip.context.disabled;
    }
    /**
     * Getter if the row is root.
     *
     * @hidden
     * @internal
     */
    get isRootRow() {
        if (!this.isRow(this.strip.context)) {
            return false;
        }
        return this.strip.context.isRoot;
    }
    get hasChildren() {
        if (!this.isRow(this.strip.context)) {
            return false;
        }
        return this.strip.context.hasChildren;
    }
    /**
     * Enter row or cell edit mode depending the grid rowEditable option
     *
     * @example
     * ```typescript
     * this.gridEditingActions.startEdit();
     * ```
     */
    startEdit(event) {
        if (event) {
            event.stopPropagation();
        }
        if (!this.isRow(this.strip.context)) {
            return;
        }
        const row = this.strip.context;
        const firstEditable = row.cells.filter(cell => cell.editable)[0];
        const grid = row.grid;
        if (!grid.hasEditableColumns) {
            this.isMessageShown = showMessage('The grid should be editable in order to use IgxGridEditingActionsComponent', this.isMessageShown);
            return;
        }
        // be sure row is in view
        if (grid.rowList.filter(r => r === row).length !== 0) {
            grid.gridAPI.crudService.enterEditMode(firstEditable, event);
            firstEditable.activate(event);
        }
        this.strip.hide();
    }
    /**
     * Delete a row according to the context
     *
     * @example
     * ```typescript
     * this.gridEditingActions.deleteRowHandler();
     * ```
     */
    deleteRowHandler(event) {
        if (event) {
            event.stopPropagation();
        }
        if (!this.isRow(this.strip.context)) {
            return;
        }
        const context = this.strip.context;
        const grid = context.grid;
        grid.deleteRow(context.key);
        this.strip.hide();
    }
    addRowHandler(event, asChild) {
        if (event) {
            event.stopPropagation();
        }
        if (!this.isRow(this.strip.context)) {
            return;
        }
        const context = this.strip.context;
        const grid = context.grid;
        if (!grid.rowEditable) {
            console.warn('The grid must use row edit mode to perform row adding! Please set rowEditable to true.');
            return;
        }
        grid.gridAPI.crudService.enterAddRowMode(context, asChild, event);
        this.strip.hide();
    }
    /**
     * @hidden
     * @internal
     */
    registerIcons() {
        this.iconService.addSvgIconFromText(addRow.name, addRow.value, 'imx-icons', true);
        this.iconService.addSvgIconFromText(addChild.name, addChild.value, 'imx-icons', true);
    }
}
IgxGridEditingActionsComponent.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "14.0.0", ngImport: i0, type: IgxGridEditingActionsComponent, deps: null, target: i0.ɵɵFactoryTarget.Component });
IgxGridEditingActionsComponent.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "14.0.0", version: "14.0.0", type: IgxGridEditingActionsComponent, selector: "igx-grid-editing-actions", inputs: { addRow: "addRow", editRow: "editRow", deleteRow: "deleteRow", addChild: "addChild" }, host: { properties: { "class.igx-action-strip__editing-actions": "this.cssClass" } }, providers: [{ provide: IgxGridActionsBaseDirective, useExisting: IgxGridEditingActionsComponent }], usesInheritance: true, ngImport: i0, template: "\n<ng-container *ngIf=\"isRowContext\">\n    <igx-grid-action-button *ngIf=\"!disabled && editRow\" [asMenuItem]=\"asMenuItems\" iconName=\"edit\" [labelText]=\"grid.resourceStrings.igx_grid_actions_edit_label\" (actionClick)=\"startEdit($event)\"></igx-grid-action-button>\n    <igx-grid-action-button *ngIf=\"addRow && isRootRow\" [asMenuItem]=\"asMenuItems\" iconName=\"add-row\" iconSet=\"imx-icons\" [labelText]=\"grid.resourceStrings.igx_grid_actions_add_label\" (actionClick)=\"addRowHandler($event)\"></igx-grid-action-button>\n    <igx-grid-action-button *ngIf=\"addChild && hasChildren\" [asMenuItem]=\"asMenuItems\" iconName=\"add-child\" iconSet=\"imx-icons\" [labelText]=\"grid.resourceStrings.igx_grid_actions_add_child_label\" (actionClick)=\"addRowHandler($event, true)\"></igx-grid-action-button>\n    <igx-grid-action-button *ngIf=\"!disabled && deleteRow\" class=\"igx-action-strip__delete\" classNames='igx-action-strip__menu-item--danger' [asMenuItem]=\"asMenuItems\" iconName=\"delete\" [labelText]=\"grid.resourceStrings.igx_grid_actions_delete_label\" (actionClick)=\"deleteRowHandler($event)\"></igx-grid-action-button>\n</ng-container>\n\n", dependencies: [{ kind: "directive", type: i1.NgIf, selector: "[ngIf]", inputs: ["ngIf", "ngIfThen", "ngIfElse"] }, { kind: "component", type: i2.IgxGridActionButtonComponent, selector: "igx-grid-action-button", inputs: ["asMenuItem", "iconName", "classNames", "iconSet", "labelText"], outputs: ["actionClick"] }] });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "14.0.0", ngImport: i0, type: IgxGridEditingActionsComponent, decorators: [{
            type: Component,
            args: [{ selector: 'igx-grid-editing-actions', providers: [{ provide: IgxGridActionsBaseDirective, useExisting: IgxGridEditingActionsComponent }], template: "\n<ng-container *ngIf=\"isRowContext\">\n    <igx-grid-action-button *ngIf=\"!disabled && editRow\" [asMenuItem]=\"asMenuItems\" iconName=\"edit\" [labelText]=\"grid.resourceStrings.igx_grid_actions_edit_label\" (actionClick)=\"startEdit($event)\"></igx-grid-action-button>\n    <igx-grid-action-button *ngIf=\"addRow && isRootRow\" [asMenuItem]=\"asMenuItems\" iconName=\"add-row\" iconSet=\"imx-icons\" [labelText]=\"grid.resourceStrings.igx_grid_actions_add_label\" (actionClick)=\"addRowHandler($event)\"></igx-grid-action-button>\n    <igx-grid-action-button *ngIf=\"addChild && hasChildren\" [asMenuItem]=\"asMenuItems\" iconName=\"add-child\" iconSet=\"imx-icons\" [labelText]=\"grid.resourceStrings.igx_grid_actions_add_child_label\" (actionClick)=\"addRowHandler($event, true)\"></igx-grid-action-button>\n    <igx-grid-action-button *ngIf=\"!disabled && deleteRow\" class=\"igx-action-strip__delete\" classNames='igx-action-strip__menu-item--danger' [asMenuItem]=\"asMenuItems\" iconName=\"delete\" [labelText]=\"grid.resourceStrings.igx_grid_actions_delete_label\" (actionClick)=\"deleteRowHandler($event)\"></igx-grid-action-button>\n</ng-container>\n\n" }]
        }], propDecorators: { cssClass: [{
                type: HostBinding,
                args: ['class.igx-action-strip__editing-actions']
            }], addRow: [{
                type: Input
            }], editRow: [{
                type: Input
            }], deleteRow: [{
                type: Input
            }], addChild: [{
                type: Input
            }] } });
//# sourceMappingURL=data:application/json;base64,