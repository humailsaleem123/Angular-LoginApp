import { Directive, EventEmitter, Inject } from '@angular/core';
import { noop, Subject } from 'rxjs';
import { takeUntil } from 'rxjs/operators';
import { growVerIn, growVerOut } from '../animations/grow';
import { IgxAngularAnimationService } from '../services/animation/angular-animation-service';
import * as i0 from "@angular/core";
/** @hidden @internal */
export var ANIMATION_TYPE;
(function (ANIMATION_TYPE) {
    ANIMATION_TYPE["OPEN"] = "open";
    ANIMATION_TYPE["CLOSE"] = "close";
})(ANIMATION_TYPE || (ANIMATION_TYPE = {}));
/**@hidden @internal */
// eslint-disable-next-line @angular-eslint/directive-class-suffix
export class ToggleAnimationPlayer {
    constructor(animationService) {
        this.animationService = animationService;
        /** @hidden @internal */
        this.openAnimationDone = new EventEmitter();
        /** @hidden @internal */
        this.closeAnimationDone = new EventEmitter();
        /** @hidden @internal */
        this.openAnimationStart = new EventEmitter();
        /** @hidden @internal */
        this.closeAnimationStart = new EventEmitter();
        /** @hidden @internal */
        this.openAnimationPlayer = null;
        /** @hidden @internal */
        this.closeAnimationPlayer = null;
        this.destroy$ = new Subject();
        this.players = new Map();
        this._animationSettings = {
            openAnimation: growVerIn,
            closeAnimation: growVerOut
        };
        this.closeInterrupted = false;
        this.openInterrupted = false;
        this._defaultClosedCallback = noop;
        this._defaultOpenedCallback = noop;
        this.onClosedCallback = this._defaultClosedCallback;
        this.onOpenedCallback = this._defaultOpenedCallback;
    }
    get animationSettings() {
        return this._animationSettings;
    }
    set animationSettings(value) {
        this._animationSettings = value;
    }
    /** @hidden @internal */
    playOpenAnimation(targetElement, onDone) {
        this.startPlayer(ANIMATION_TYPE.OPEN, targetElement, onDone || this._defaultOpenedCallback);
    }
    /** @hidden @internal */
    playCloseAnimation(targetElement, onDone) {
        this.startPlayer(ANIMATION_TYPE.CLOSE, targetElement, onDone || this._defaultClosedCallback);
    }
    ngOnDestroy() {
        this.destroy$.next();
        this.destroy$.complete();
    }
    startPlayer(type, targetElement, callback) {
        if (!targetElement) { // if no element is passed, there is nothing to animate
            return;
        }
        let target = this.getPlayer(type);
        if (!target) {
            target = this.initializePlayer(type, targetElement, callback);
        }
        // V.S. Jun 28th, 2021 #9783: player will NOT be initialized w/ null settings
        // events will already be emitted
        if (!target || target.hasStarted()) {
            return;
        }
        const targetEmitter = type === ANIMATION_TYPE.OPEN ? this.openAnimationStart : this.closeAnimationStart;
        targetEmitter.emit();
        if (target) {
            target.play();
        }
    }
    initializePlayer(type, targetElement, callback) {
        const oppositeType = type === ANIMATION_TYPE.OPEN ? ANIMATION_TYPE.CLOSE : ANIMATION_TYPE.OPEN;
        // V.S. Jun 28th, 2021 #9783: Treat falsy animation settings as disabled animations
        const targetAnimationSettings = this.animationSettings || { closeAnimation: null, openAnimation: null };
        const animationSettings = type === ANIMATION_TYPE.OPEN ?
            targetAnimationSettings.openAnimation : targetAnimationSettings.closeAnimation;
        // V.S. Jun 28th, 2021 #9783: When no animation in target direction, emit start and done events and return
        if (!animationSettings) {
            this.setCallback(type, callback);
            const targetEmitter = type === ANIMATION_TYPE.OPEN ? this.openAnimationStart : this.closeAnimationStart;
            targetEmitter.emit();
            this.onDoneHandler(type);
            return;
        }
        const opposite = this.getPlayer(oppositeType);
        let oppositePosition = 1;
        if (opposite) {
            oppositePosition = opposite.position;
            this.cleanUpPlayer(oppositeType);
        }
        if (type === ANIMATION_TYPE.OPEN) {
            this.openAnimationPlayer = this.animationService.buildAnimation(animationSettings, targetElement.nativeElement);
        }
        else if (type === ANIMATION_TYPE.CLOSE) {
            this.closeAnimationPlayer = this.animationService.buildAnimation(animationSettings, targetElement.nativeElement);
        }
        const target = this.getPlayer(type);
        target.init();
        this.getPlayer(type).position = 1 - oppositePosition;
        this.setCallback(type, callback);
        target.animationEnd.pipe(takeUntil(this.destroy$)).subscribe(() => {
            this.onDoneHandler(type);
        });
        return target;
    }
    onDoneHandler(type) {
        const targetEmitter = type === ANIMATION_TYPE.OPEN ? this.openAnimationDone : this.closeAnimationDone;
        const targetCallback = type === ANIMATION_TYPE.OPEN ? this.onOpenedCallback : this.onClosedCallback;
        targetCallback();
        if (!(type === ANIMATION_TYPE.OPEN ? this.openInterrupted : this.closeInterrupted)) {
            targetEmitter.emit();
        }
        this.cleanUpPlayer(type);
    }
    setCallback(type, callback) {
        if (type === ANIMATION_TYPE.OPEN) {
            this.onOpenedCallback = callback;
            this.openInterrupted = false;
        }
        else if (type === ANIMATION_TYPE.CLOSE) {
            this.onClosedCallback = callback;
            this.closeInterrupted = false;
        }
    }
    cleanUpPlayer(target) {
        switch (target) {
            case ANIMATION_TYPE.CLOSE:
                if (this.closeAnimationPlayer != null) {
                    this.closeAnimationPlayer.reset();
                    this.closeAnimationPlayer.destroy();
                    this.closeAnimationPlayer = null;
                }
                this.closeInterrupted = true;
                this.onClosedCallback = this._defaultClosedCallback;
                break;
            case ANIMATION_TYPE.OPEN:
                if (this.openAnimationPlayer != null) {
                    this.openAnimationPlayer.reset();
                    this.openAnimationPlayer.destroy();
                    this.openAnimationPlayer = null;
                }
                this.openInterrupted = true;
                this.onOpenedCallback = this._defaultOpenedCallback;
                break;
            default:
                break;
        }
    }
    getPlayer(type) {
        switch (type) {
            case ANIMATION_TYPE.OPEN:
                return this.openAnimationPlayer;
            case ANIMATION_TYPE.CLOSE:
                return this.closeAnimationPlayer;
            default:
                return null;
        }
    }
}
ToggleAnimationPlayer.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "14.0.0", ngImport: i0, type: ToggleAnimationPlayer, deps: [{ token: IgxAngularAnimationService }], target: i0.ɵɵFactoryTarget.Directive });
ToggleAnimationPlayer.ɵdir = i0.ɵɵngDeclareDirective({ minVersion: "14.0.0", version: "14.0.0", type: ToggleAnimationPlayer, ngImport: i0 });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "14.0.0", ngImport: i0, type: ToggleAnimationPlayer, decorators: [{
            type: Directive
        }], ctorParameters: function () { return [{ type: undefined, decorators: [{
                    type: Inject,
                    args: [IgxAngularAnimationService]
                }] }]; } });
//# sourceMappingURL=data:application/json;base64,