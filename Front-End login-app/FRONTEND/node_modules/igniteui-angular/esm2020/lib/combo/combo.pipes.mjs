import { Inject, Pipe } from '@angular/core';
import { cloneArray } from '../core/utils';
import { DataUtil } from '../data-operations/data-util';
import { DefaultSortingStrategy } from '../data-operations/sorting-strategy';
import { IGX_COMBO_COMPONENT } from './combo.common';
import * as i0 from "@angular/core";
/** @hidden */
export class IgxComboFilteringPipe {
    transform(collection, searchValue, displayKey, filteringOptions, filterFunction = defaultFilterFunction) {
        if (!collection) {
            return [];
        }
        if (!filteringOptions.filterable) {
            return collection;
        }
        filteringOptions.filteringKey = filteringOptions.filteringKey ?? displayKey;
        return filterFunction(collection, searchValue, filteringOptions);
    }
}
IgxComboFilteringPipe.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "14.0.0", ngImport: i0, type: IgxComboFilteringPipe, deps: [], target: i0.ɵɵFactoryTarget.Pipe });
IgxComboFilteringPipe.ɵpipe = i0.ɵɵngDeclarePipe({ minVersion: "14.0.0", version: "14.0.0", ngImport: i0, type: IgxComboFilteringPipe, name: "comboFiltering" });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "14.0.0", ngImport: i0, type: IgxComboFilteringPipe, decorators: [{
            type: Pipe,
            args: [{ name: 'comboFiltering' }]
        }] });
/** @hidden */
export class IgxComboGroupingPipe {
    constructor(combo) {
        this.combo = combo;
    }
    transform(collection, groupKey, valueKey, sortingDirection) {
        this.combo.filteredData = collection;
        if ((!groupKey && groupKey !== 0) || !collection.length) {
            return collection;
        }
        const sorted = DataUtil.sort(cloneArray(collection), [{
                fieldName: groupKey,
                dir: sortingDirection,
                ignoreCase: true,
                strategy: DefaultSortingStrategy.instance()
            }]);
        const data = cloneArray(sorted);
        let inserts = 0;
        let currentHeader = null;
        for (let i = 0; i < sorted.length; i++) {
            let insertFlag = 0;
            if (currentHeader !== sorted[i][groupKey]) {
                currentHeader = sorted[i][groupKey];
                insertFlag = 1;
            }
            if (insertFlag) {
                data.splice(i + inserts, 0, {
                    [valueKey]: currentHeader,
                    [groupKey]: currentHeader,
                    isHeader: true
                });
                inserts++;
            }
        }
        return data;
    }
}
IgxComboGroupingPipe.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "14.0.0", ngImport: i0, type: IgxComboGroupingPipe, deps: [{ token: IGX_COMBO_COMPONENT }], target: i0.ɵɵFactoryTarget.Pipe });
IgxComboGroupingPipe.ɵpipe = i0.ɵɵngDeclarePipe({ minVersion: "14.0.0", version: "14.0.0", ngImport: i0, type: IgxComboGroupingPipe, name: "comboGrouping" });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "14.0.0", ngImport: i0, type: IgxComboGroupingPipe, decorators: [{
            type: Pipe,
            args: [{ name: 'comboGrouping' }]
        }], ctorParameters: function () { return [{ type: undefined, decorators: [{
                    type: Inject,
                    args: [IGX_COMBO_COMPONENT]
                }] }]; } });
function defaultFilterFunction(collection, searchValue, filteringOptions) {
    if (!searchValue) {
        return collection;
    }
    const searchTerm = filteringOptions.caseSensitive ? searchValue : searchValue.toLowerCase();
    if (filteringOptions.filteringKey != null) {
        return collection.filter(e => filteringOptions.caseSensitive ?
            e[filteringOptions.filteringKey]?.includes(searchTerm) :
            e[filteringOptions.filteringKey]?.toString().toLowerCase().includes(searchTerm));
    }
    else {
        return collection.filter(e => filteringOptions.caseSensitive ?
            e.includes(searchTerm) :
            e.toString().toLowerCase().includes(searchTerm));
    }
}
//# sourceMappingURL=data:application/json;base64,